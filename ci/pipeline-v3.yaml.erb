# prettier-ignore
<%
  ASSETS = {
    "assets-overview": { type: "app", path: "apps/assets-overview"},
    "communicator": { type: "lib", path: "libs/communicator"},
    "juno-ui-components": { type: "lib", path: "libs/juno-ui-components"},
    "messages-provider": { type: "lib", path: "libs/messages-provider"},
    "policy-engine": { type: "lib", path: "libs/policy-engine"},
    "url-state-provider": { type: "lib", path: "libs/url-state-provider"},
    "url-state-router": { type: "lib", path: "libs/url-state-router"},
  }
%>
#    "oauth": { type: "lib", path: "libs/oauth"},

resources:
  <%# BASE IMAGE %>
  - name: base.image
    type: docker-image
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v3-base

  - name: swift.image
    type: docker-image
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v3-swift

  - name: assets-server.image
    type: docker-image
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v3-assets-server

  - name: juno.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: pipelineV3
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))      

  - name: juno-swift.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: pipelineV3
      username: sapcc-bot
      paths: ["ci/Dockerfile.swift"]
      password: ((github-access-token/sapcc-bot))   

  <%# ASSETS SOURCE GIT %>
  <% ASSETS.each do |name,details| %>
  - name: <%=details[:type]%>-<%= name %>.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: pipelineV3
      paths: ["<%=details[:path]%>","package.json","e2e", ".yarn", "scripts/build_asset.sh", "scripts/asset_storage.sh" ]
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))
  
  - name: <%= details[:type] %>-<%= name %>.version
    type: time-version-resource
    check_every: 525600h
    source: { key: "<%= details[:type] %>-<%= name %>" } # disambiguate from other time-version resources

  <% end %>

  - name: assets-server.version
    type: time-version-resource
    check_every: 525600h
    source: { key: "juno-assets-server-version" } # disambiguate from other time-version resources


resource_types:
  - name: git-proxy
    type: registry-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud/concourse-git-resource-proxy
      tag: latest

  - name: time-version-resource
    type: docker-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud/concourse-time-version-resource
      tag: v2

jobs:
  <%# for info only %>
  - name: readme
    serial: true
    plan:
      - task: describe-this-pipeline
        config:
          platform: "linux"
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/alpine
              tag: latest
          run:
            path: /bin/echo
            args:
              - -e
              - '\tThis pipeline is defined at: https://github.com/sapcc/juno/ci/\n\n'
              - '\tManage Juno images: https://keppel.eu-de-1.cloud.sap/ccloud/juno\n'

  <%# BUILD BASE IMAGE %>
  - name: build-base-image
    public: true
    plan:
      - get: juno.git
        trigger: true

      - put: base.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: juno.git
          dockerfile: juno.git/ci/Dockerfile.base

  - name: build-swift-image
    public: true
    plan:
      - get: juno-swift.git
        trigger: true

      - put: swift.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: juno-swift.git
          dockerfile: juno-swift.git/ci/Dockerfile.swift

  <%# run unit tests for each asset and build %>
  
  <% ASSETS.each do |name,details| %>

  - name: build-<%= details[:type] %>-<%= name %>
    public: true
    plan:
      - get: <%= details[:type] %>-<%= name %>.git
        trigger: true
      - get: base.image
      - get: swift.image
      - put: <%= details[:type] %>-<%= name %>.version

      - task: build
        image: base.image
        input_mapping: 
          latest: <%= details[:type] %>-<%= name %>.git
        config:
          inputs:
            - name: latest
          outputs:
            - name: build_result
          platform: linux
          run:
            path: /bin/sh
            args:
              - -cx
              - |
                set -e 
                ls -la
                echo "sync all node_modules from /juno/ to ./latest/"
                rsync -am --include='*/' --include='node_modules/***' --exclude='*' /juno/ ./latest
                cd ./latest
                echo "update node modules -> npm install --silent"
                npm install --silent
                echo "run build_asset.sh --asset-path <%= details[:path] %> --asset-name <%= name %> --output-path ../build_result"
                ./scripts/build_asset.sh --asset-path <%= details[:path] %> --asset-name <%= name %> --output-path ../build_result
      - task: upload
        image: swift.image
        params: 
          OS_USERNAME: ((swift-username))
          OS_PASSWORD: ((keystone-user-password/concourse-eu-de-1))
          OS_AUTH_URL: ((swift-auth-url))
          OS_USER_DOMAIN_NAME: ((swift-user-domain-name))
          OS_PROJECT_DOMAIN_NAME: ((swift-project-domain-name))
          OS_PROJECT_NAME: ((swift-project-name))
        input_mapping: 
          juno: <%=details[:type]%>-<%= name %>.git
        config:
          inputs:
            - name: build_result
            - name: juno
          platform: linux
          run:
            path: /bin/sh
            args:
              - -cx
              - |
                set -e 
                cd ./juno
                ./scripts/asset_storage.sh --asset-name <%= name %> --asset-path <%= details[:path] %> --action upload --root-path ../build_result
  <% end %> 

  <% 
  # this step combines all assets that where build and uploaded before to swift
  # for that we use nginx image and copy all assets (that where build in the step before) into /usr/share/nginx/html/
  # this image will be deployed as asset server 

  # Important! 
  # If the asset-server.image was not build before 
  # 1) comment the parts in the dockerfile where the image is needed to copy old stuff over
  # 2) you need first build the libs otherwise the build importmap step will fail because 
  #    it will not find the libs
  # 3) if the libs are build and uploaded to swift you can add the apps
  # 4) when the apps are build without problems you can uncomment the parts in 
  #    the dockerfile to store the old versions 
  %>
  - name: build-assets-server
    public: true
    plan:
      - get: swift.image
      - get: juno.git        
        passed: [build-base-image]
      <% ASSETS.each do |name, details|%>
      - get: <%= details[:type] %>-<%= name %>.version
        trigger: true
        passed: ["build-<%= details[:type] %>-<%= name %>"]  
      <% end %>
      - put: assets-server.version
      <%# COPY ALL BUILDS TO dist %>
      - task: combine-builds
        image: swift.image
        params: 
          OS_USERNAME: ((swift-username))
          OS_PASSWORD: ((keystone-user-password/concourse-eu-de-1))
          OS_AUTH_URL: ((swift-auth-url))
          OS_USER_DOMAIN_NAME: ((swift-user-domain-name))
          OS_PROJECT_DOMAIN_NAME: ((swift-project-domain-name))
          OS_PROJECT_NAME: ((swift-project-name))
        config:
          platform: linux
          inputs:
            - name: juno.git
          outputs:
            - name: dist
          run:
            path: /bin/sh
            args:
              - -cx
              - |
                cd ./juno.git
                <% ASSETS.each do |name, details|%>
                  ./scripts/asset_storage.sh --asset-name <%= name %> --asset-path <%= details[:path] %> --action download --root-path ../dist
                  ls -all ../dist/<%=details[:type]%>s/<%= name %>/
                <% end %>
      
      # to serve our js, css and stattic assets this step will add all the created data 
      # in dist/ to the nginx image in /usr/share/nginx/html
      - put: assets-server.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          # root for docker build, its using the output dir from the step before
          build: dist
          dockerfile: juno.git/ci/Dockerfile.assets.server
          tag: assets-server.version/version
          build_args: 
            PROVIDERS: "jspm"
            DEFAULT_PROVIDER: "jspm"
        get_params:
          skip_download: true   