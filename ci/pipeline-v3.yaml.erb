# prettier-ignore
<%
  ASSETS = {
    "auth": { type: "app", path: "apps/auth" },
  }
%>

resources:
  <%# BASE IMAGE %>
  - name: base.image
    type: docker-image
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v3-base

  - name: swift.image
    type: docker-image
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v3-swift

  - name: juno.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: pipelineV3
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))      

  - name: juno-swift.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: pipelineV3
      username: sapcc-bot
      paths: ["ci/Dockerfile.swift"]
      password: ((github-access-token/sapcc-bot))   

  <%# ASSETS SOURCE GIT %>
  <% ASSETS.each do |name,details| %>
  - name: <%=details[:type]%>-<%= name %>.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: pipelineV3
      paths: ["<%=details[:path]%>","package.json","e2e", ".yarn", "scripts/build_asset.sh", "scripts/asset_storage.sh" ]
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))
  
  - name: assets-server.version
    type: time-version-resource
    check_every: 525600h
    source: { key: "juno-assets-server-version" } # disambiguate from other time-version resources

  - name: <%= details[:type] %>-<%= name %>.version
    type: time-version-resource
    check_every: 525600h
    source: { key: "<%= details[:type] %>-<%= name %>" } # disambiguate from other time-version resources

  <% end %>

resource_types:
  - name: git-proxy
    type: registry-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud/concourse-git-resource-proxy
      tag: latest

  - name: time-version-resource
    type: docker-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud/concourse-time-version-resource
      tag: v2

jobs:
  <%# for info only %>
  - name: readme
    serial: true
    plan:
      - task: describe-this-pipeline
        config:
          platform: "linux"
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/alpine
              tag: latest
          run:
            path: /bin/echo
            args:
              - -e
              - '\tThis pipeline is defined at: https://github.com/sapcc/juno/ci/\n\n'
              - '\tManage Juno images: https://keppel.eu-de-1.cloud.sap/ccloud/juno\n'

  <%# BUILD BASE IMAGE %>
  - name: build-base-image
    public: true
    plan:
      - get: juno.git
        trigger: true

      - put: base.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: juno.git
          dockerfile: juno.git/ci/Dockerfile.base

  - name: build-swift-image
    public: true
    plan:
      - get: juno-swift.git
        trigger: true

      - put: swift.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: juno-swift.git
          dockerfile: juno-swift.git/ci/Dockerfile.swift

  <%# run unit tests for each asset and build %>
  
  <% ASSETS.each do |name,details| %>

  - name: build-<%= details[:type] %>-<%= name %>
    public: true
    plan:
      - get: <%= details[:type] %>-<%= name %>.git
        trigger: true
      - get: base.image
      - get: swift.image
      - put: <%= details[:type] %>-<%= name %>.version

      - task: build
        image: base.image
        input_mapping: 
          latest: <%= details[:type] %>-<%= name %>.git
        config:
          inputs:
            - name: latest
          outputs:
            - name: build_result
          platform: linux
          run:
            path: /bin/sh
            args:
              - -cx
              - |
                set -e 
                ls -la
                echo "sync all node_modules from /juno/ to ./latest/"
                rsync -am --include='*/' --include='node_modules/***' --exclude='*' /juno/ ./latest
                cd ./latest
                echo "update node modules -> npm install --silent"
                npm install --silent
                echo "run build_asset.sh --asset-path <%= details[:path] %> --asset-name <%= name %> --output-path ../build_result"
                ./scripts/build_asset.sh --asset-path <%= details[:path] %> --asset-name <%= name %> --output-path ../build_result
      - task: upload
        image: swift.image
        params: 
          OS_USERNAME: ((swift-username))
          OS_PASSWORD: ((keystone-user-password/concourse-eu-de-1))
          OS_AUTH_URL: ((swift-auth-url))
          OS_USER_DOMAIN_NAME: ((swift-user-domain-name))
          OS_PROJECT_DOMAIN_NAME: ((swift-project-domain-name))
          OS_PROJECT_NAME: ((swift-project-name))
        input_mapping: 
          juno: <%=details[:type]%>-<%= name %>.git
        config:
          inputs:
            - name: build_result
            - name: juno
          platform: linux
          run:
            path: /bin/sh
            args:
              - -cx
              - |
                set -e 
                cd ./juno
                ./scripts/asset_storage.sh --asset-name <%= name %> --asset-path <%= details[:path] %> --action upload --root-path ../build_result
  <% end %> 

  <% 
  # this step combines all app images
  # for that we use nginx image and copy all built apps (in the step before)
  # into /usr/share/nginx/html/
  # this image will be deployed as CDN server 
  %>
  - name: build-assets-server
    public: true
    plan:
      - get: juno.git        
        passed: [build-base-image]
      <% ASSETS.each do |name, details|%>
      - get: <%= details[:type] %>-<%= name %>.version
        trigger: true
        passed: ["build-<%= details[:type] %>-<%= name %>"]  
      <% end %>
      - put: assets-server.version
      <%# COPY ALL BUILDS TO dist %>
      - task: combine-builds
        image: swift.image
        params: 
          OS_USERNAME: ((swift-username))
          OS_PASSWORD: ((keystone-user-password/concourse-eu-de-1))
          OS_AUTH_URL: ((swift-auth-url))
          OS_USER_DOMAIN_NAME: ((swift-user-domain-name))
          OS_PROJECT_DOMAIN_NAME: ((swift-project-domain-name))
          OS_PROJECT_NAME: ((swift-project-name))
        config:
          platform: linux
          inputs:
            - name: juno
          outputs:
            - name: dist
          run:
            path: /bin/sh
            args:
              - -cx
              - |
                set -e 
                cd ./juno
                exit 1
