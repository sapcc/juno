# prettier-ignore
<%
  HA_REGIONS = [
    "eu-de-1",
    "eu-de-2",
    "eu-nl-1",
    "ap-ae-1",
    "ap-jp-2",
    "ap-au-1",
    "la-br-1",
    "na-us-1",
    "na-us-2"
  ]
%>

resources:
  - name: juno.git
    type: git
    icon: github
    source:
      uri: https://github.com/sapcc/juno.git
      branch: pipelineV4
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))   

  - name: swift-juno-pending-assets.version
    type: http-resource
    source:
      url: https://objectstore-3.eu-de-1.cloud.sap:443/v1/AUTH_caa6209d2c38450f8266311fd0f05446/juno-pending-assets
      method: HEAD
      version: 
        header: x-container-bytes-used

  - name: assets-server.version
    type: time-version-resource
    icon: lock
    check_every: 525600h
    source: { key: "juno-assets-server-version" } # disambiguate from other time-version resources

  - name: meta
    type: meta
<% 
  # this step combines all assets that where build and uploaded before to swift
  # for that we use nginx image and copy all assets (that where build in the step before) into /usr/share/nginx/html/
  # this image will be deployed as asset server 

  # Important! 
  # If the asset-server.image was not build before 
  # 1) comment the parts in the dockerfile where the image is needed to copy old stuff over
  # 2) you need first build the libs otherwise the build importmap step will fail because 
  #    it will not find the libs
  # 3) if the libs are build and uploaded to swift you can add the apps
  # 4) when the apps are build without problems you can uncomment the parts in 
  #    the dockerfile to store the old versions 
  %>
  

groups: 
  - name: assets-server 
    jobs:
      - download-validate-pending-assets
      - download-all-final-assets
      - build-assets-server-image
      - deploy-assets-server-to-s-qa-de-1
      - deploy-assets-server-to-qa-de-2
      - e2e-tests-assets-server-s-qa-de-1
      - promote-prod-assets-server
      <%HA_REGIONS.each do |region|%>
      - deploy-assets-server-to-<%= region %>
      - e2e-tests-assets-server-<%= region %>
      <% end %> 

jobs:
  - name: download-validate-pending-assets
    plan:
      - get: juno.git
      - get: meta  
      - get: swift-juno-pending-assets.version
        trigger: true 

      - task: download-from-juno-pending-assets
        file: juno.git/ci/shared/swift-download.yaml
        output_mapping:
          download: pending_assets
        params:
          DEBUG: "true"
          CONTAINER: "juno-pending-assets"

      - task: upload-test-result
        file: juno.git/ci/pipelinev4/tasks/generate-test-data.yaml
        input_mapping:
          pending_assets: pending_assets
        output_mapping:
          test_data: test_data

      # - task: generate-import-map-and-co
      #   config:
      #     platform: linux
      #     image_resource:
      #       type: docker-image
      #       source:
      #         repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v3-base
      #         tag: "latest"    
      #     inputs:
      #       - name: pending_assets
      #     outputs:
      #       - name: importmap_data
      #     run:
      #       path: /bin/sh
      #       args:
      #         - -c
      #         - |
      #           WORKDIR=$(pwd)
      #           cd /juno 
      #           npm run build-libs
      #           cd $WORKDIR
      #           mkdir -p ./pending_assets/libs
      #           # copy libs to pending_assets 
      #           # some apps are using the libs and we need to have them in the same folder
      #           for lib in /juno/libs/*; do
      #           name=$(basename $lib)
      #           if [ ! -d "./pending_assets/libs/${name}@latest" ]; then
      #           cp -r $lib ./pending_assets/libs/"${name}@latest"
      #           fi
              
      #           done

      #           # Generate importmap and manifest only for pending apps and libs
      #           # this step also generates the externals esm packages
      #           node /juno/ci/scripts/esm_build/generate_importmap.mjs \
      #           --node-modules-path=/tmp/ \
      #           --external-path=./importmap_data/externals \
      #           --exit-on-error=false \
      #           --src=./pending_assets \
      #           --base-url="http://localhost:3000" \
      #           --ignore-externals=false \
      #           --importmap-path=./importmap_data/importmap.json  \
      #           --verbose=false ; \
      #           \
      #           node /juno/ci/scripts/generate_manifest.mjs \
      #           --src=./importmap_data \
      #           --output=./importmap_data/manifest.json \
      #           --base-url="http://localhost:3000" \
      #           --verbose=false 

      - task: test
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud/cypress-client
              tag: "latest"    
          inputs:
            - name: juno.git
            - name: test_data
            - name: pending_assets
            - name: meta
          outputs:
            - name: passed 
            - name: test_results  

          run:
            path: /bin/sh
            args:
              - -c
              - |
                WORKDIR=$(pwd)
                FAIL='\033[0;31m'
                SUCCESS='\033[0;32m'
                INFO='\033[0;36m'
                NC='\033[0m' # No Color
                BUILD_NAME="$(cat meta/build-name)"
                URL="$(cat meta/atc-external-url)/teams/$(cat meta/build-team-name)/pipelines/$(cat meta/build-pipeline-name)/jobs/$(cat meta/build-job-name)/builds/$(cat meta/build-name)"

                echo -e "${INFO}copy e2e tests from juno.git to ./e2e ${NC}"
                cp -r ./juno.git/e2e .
                echo -e "${INFO}copy mount-test.html to test_data ${NC}"
                cp ./juno.git/ci/assets-server/mount-test.html ./test_data/      
                echo -e "${INFO}create empty build-log.json ${NC}"
                echo '[]' > test_results/build-log.json
                echo -e "${INFO}create serve.config.json ${NC}"
                echo -e "${INFO}this is needed to avoid clean urls, we want to have extensions like .html ${NC}"
                echo '{"cleanUrls": false}' > /tmp/serve.config.json
                echo -e "${INFO}run server in test_data ${NC}"
                serve ./test_data -n -u -p 3000 -c /tmp/serve.config.json & 

                echo -e "${INFO}=== RUN MOUNT TESTS ===\n ${NC}"
                cd e2e
                # loop over assets in pending_assets to avoid unnesseray tests                
                for f in ../pending_assets/**/*/package.json; do 
                NAME=$(cat $f | jq -r '.name') 
                VERSION=$(cat $f | jq -r '.version') 
                TYPE_FOLDER=$(basename $(dirname $(dirname $f)))
                echo -e "${INFO}===TEST $NAME@$VERSION ($TYPE_FOLDER)${NC}" 
                
                # mkdir -p "../test_results/cypress/screenshots/$NAME@$VERSION" \
                # "../test_results/cypress/videos/$NAME@$VERSION" \
                # "../test_results/cypress/text/$NAME@$VERSION" \
                
                cypress run --spec "cypress/integration/assets-server/mount_asset.spec.js" \
                --browser chrome \
                --env APP_NAME=$NAME,APP_VERSION=$VERSION \
                --config '{"baseUrl":"http://127.0.0.1:3000",\
                "screenshotsFolder":"$WORKDIR/test_results/$BUILD_NAME/$NAME@$VERSION/screenshots",\
                "videosFolder":"$WORKDIR/test_results/$BUILD_NAME/$NAME@$VERSION/videos"}'

                # Check the exit status of the cp command 
                if [ $? -eq 0 ]; then 
                STATUS="passed"
                mkdir -p "../passed/$TYPE_FOLDER" && \
                cp -r $(dirname $f) "../passed/$TYPE_FOLDER/$NAME@$VERSION" 
                else 
                STATUS="failed"
                echo -e "${INFO}===RESULT: $NAME@$VERSION $STATUS ${NC}"

                jq --arg n "$NAME" --arg v "$VERSION" --arg s "$STATUS" --arg l "$URL" \
                '. += [{"name": $n, "version": $v, "status": $s, "log": $l}]' ../test_results/build-log.json > ../test_results/build-log.json.temp 
                mv ../test_results/build-log.json.temp ../test_results/build-log.json 
                done
                exit 0

      # - task: upload-test-result
      #   file: juno.git/ci/shared/swift-cypress-upload.yaml
      #   input_mapping:
      #     version: assets-server.version
      #     upload: test_results
      #   params:
      #     NAME: "pending-assets-tests"
      - task: upload-test-result
        file: juno.git/ci/pipelinev4/tasks/swift.yaml
        input_mapping:
          input: test_results
        params:
          COMMAND: "mkdir -p juno/pending-assets-tests && cp -r input/* juno/pending-assets-tests/ && swift upload --skip-identical --changed cypress juno"

      - task: upload-passed-and-cleanup
        file: juno.git/ci/pipelinev4/tasks/swift.yaml
        input_mapping:
          input: passed
        params:
          COMMAND: "swift upload juno-final-assets input"

      - task: exit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/node
              tag: "18-alpine"   
          run:
            path: /bin/sh
            args:
              - -c
              - |
                exit 1

      <%# - task: upload-to-final %>

  - name: download-all-final-assets
    plan:
    - get: juno.git
      trigger: true
      passed: [download-validate-pending-assets]
    - get: assets-server.version    
  - name: build-assets-server-image
    plan:
    - get: juno.git
      trigger: true
      passed: [download-all-final-assets]
  - name: deploy-assets-server-to-s-qa-de-1
    plan:
    - get: juno.git
      trigger: true
      passed: [build-assets-server-image]
  - name: deploy-assets-server-to-qa-de-2
    plan:
      - get: juno.git
        trigger: true  
        passed: [build-assets-server-image]
  - name: e2e-tests-assets-server-s-qa-de-1
    plan:
      - get: juno.git
        trigger: true  
        passed: [deploy-assets-server-to-s-qa-de-1]
  - name: promote-prod-assets-server
    plan:
      - get: juno.git
        trigger: false  
        passed: [e2e-tests-assets-server-s-qa-de-1]
  <%HA_REGIONS.each do |region|%>
  - name: deploy-assets-server-to-<%= region %>
    plan:
      - get: juno.git
        trigger: true  
        passed: [promote-prod-assets-server]
  - name: e2e-tests-assets-server-<%= region %>
    plan:
      - get: juno.git
        trigger: true  
        passed: [deploy-assets-server-to-<%= region %>]
  <% end %>  