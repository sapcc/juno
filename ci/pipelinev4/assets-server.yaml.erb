# prettier-ignore
<%
  # High Availability Regions
  HA_REGIONS = [
    "eu-de-1",
    "eu-de-2",
    "eu-nl-1",
    "ap-ae-1",
    "ap-jp-2",
    "ap-au-1",
    "la-br-1",
    "na-us-1",
    "na-us-2"
  ]
%>

resources:
  # juno repository
  - name: juno.git
    type: git
    icon: github
    source:
      uri: https://github.com/sapcc/juno.git
      branch: pipelineV4
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))   


  - name: swift-juno-pending-assets.version
    type: http-resource
    source:
      url: https://objectstore-3.eu-de-1.cloud.sap:443/v1/AUTH_caa6209d2c38450f8266311fd0f05446/juno-pending-assets
      method: HEAD
      version: 
        header: x-container-bytes-used

  - name: assets-server.version
    type: time-version-resource
    icon: lock
    check_every: 525600h
    source: { key: "juno-assets-server-version" } # disambiguate from other time-version resources

  # meta is used to store/access metadata about the build
  - name: meta
    type: meta

# algorithm: 
# 1. download all pending assets from swift
# 2. validate the assets
# 3. build the assets-server image
# 4. deploy the assets-server to s-qa-de-1 and s-qa-de-2
# 5. run e2e tests on s-qa-de-1
# 6. promote the assets-server to prod
# 7. deploy the assets-server to all HA regions
# 8. run e2e tests on all HA regions
groups: 
  - name: assets-server 
    jobs:
      - download-validate-pending-assets
      - download-all-final-assets
      - build-assets-server-image
      - deploy-assets-server-to-s-qa-de-1
      - deploy-assets-server-to-qa-de-2
      - e2e-tests-assets-server-s-qa-de-1
      - promote-prod-assets-server
      <%HA_REGIONS.each do |region|%>
      - deploy-assets-server-to-<%= region %>
      - e2e-tests-assets-server-<%= region %>
      <% end %> 

jobs:
  - name: download-validate-pending-assets
    plan:
      - get: juno.git
      - get: meta  
      - get: swift-juno-pending-assets.version
        trigger: true 

      - task: download-from-juno-pending-assets
        file: juno.git/ci/shared/swift-download.yaml
        output_mapping:
          download: pending_assets
        params:
          DEBUG: "true"
          CONTAINER: "juno-pending-assets"

      - task: check-integrity 
        config:
          platform: "linux"
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/alpine
              tag: latest
          inputs:
            - name: pending_assets  
          outputs:
            - name: passed_check_integrity
          run:
            path: /bin/sh
            args:
              - -c
              - |
                FAIL='\033[0;31m'
                SUCCESS='\033[0;32m'
                INFO='\033[0;36m'
                NC='\033[0m' # No Color
                echo "1. check if the name and repository are set in the package.json file"
                echo "2. check if the value of main or module is set in the package.json file and the file exists"
                for f in ./pending_assets/**/*/package.json; do 
                  PASSED=true
                  NAME=$(basename $(dirname $f))
                  TYPE=$(basename $(dirname $(dirname $f)))
                  echo -e "${INFO}found $NAME in $TYPE, checking... ${NC}"
                  # loop over keys name, repository and version
                  for key in name version repository; do
                    echo -ne "${INFO} $key ${NC}"
                    if ! grep -q "\"$key\":" $f; then
                      echo -e "${FAIL}missing${NC}"
                      PASSED=false
                    else 
                      echo -e "${SUCCESS}OK${NC}"
                    fi  
                  done 
                  if $PASSED; then
                    echo -e "${SUCCESS} PASSED${NC}"
                  else  
                    echo -e "${FAIL} FAILED${NC}"
                  fi

                  # if main or module exists, check if the file exists
                  if grep -q "\"main\":" $f; then
                    echo -ne "${INFO} main ${NC}"
                    if [ -f ./pending_assets/$TYPE/$NAME/$(grep -o "\"main\":" $f | cut -d\" -f4) ]; then
                      echo -e "${SUCCESS}OK${NC}"
                    else
                      echo -e "${FAIL}missing${NC}"
                    fi
                  elif grep -q "\"module\":" $f; then
                    echo -ne "${INFO} module ${NC}"
                    if [ -f ./pending_assets/$TYPE/$NAME/$(grep -o "\"module\":" $f | cut -d\" -f4) ]; then
                      echo -e "${SUCCESS}OK${NC}"
                    else
                      echo -e "${FAIL}missing${NC}"
                    fi  
                  fi
                done

      - task: download-metadata-from-juno-final-assets
        file: juno.git/ci/shared/swift-download.yaml
        output_mapping:
          download: final_assets
        params:
          DEBUG: "true"
          CONTAINER: "juno-final-assets"    

      - task: check-name-and-version 
        config:
          platform: "linux"
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/alpine
              tag: latest
          inputs:
            - name: passed_check_integrity
            - name: final_assets  
          outputs:
            - name: passed_check_name_and_version
          run:
            path: /bin/sh
            args:
              - -c
              - |
                echo "3. check if a asset is new or the version is higher than the one in the final-assets"


      - task: generate-data-for-mount-test
        file: juno.git/ci/pipelinev4/tasks/generate-test-data.yaml
        input_mapping:
          pending_assets: passed_check_integrity_and_version
        output_mapping:
          test_data: test_data

      - task: check-asset-mountable
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud/cypress-client
              tag: "latest"    
          inputs:
            - name: juno.git
            - name: test_data
            - name: passed_check_name_and_version
            - name: meta
          input_mapping:
            passed: passed_check_name_and_version
          outputs:
            - name: passed_check_asset_mountable 
            - name: test_results  

          run:
            path: /bin/sh
            args:
              - -c
              - |
                # 1. check if name and repository are set 
                # 1.1 if not set, throw error (FAILED)
                # 2. check if the such an asset exists in the swift container final-assets
                # 2.1 yes: we are in the update mode, check the version
                # 2.1.1 if the version is the same as the one in the swift container final-assets, throw error (FAILED)
                # 2.2 no: we are in the create mode (first run, new asset!)
                # 3. check main or module entry in package.json and if the entry file exists
                # 3.1 if not, throw error (FAILED)

                # 4. check if the asset can be mounted in the mount-test.html

                WORKDIR=$(pwd)
                FAIL='\033[0;31m'
                SUCCESS='\033[0;32m'
                INFO='\033[0;36m'
                NC='\033[0m' # No Color
                BUILD_NAME="$(cat meta/build-name)"
                URL="$(cat meta/atc-external-url)/teams/$(cat meta/build-team-name)/pipelines/$(cat meta/build-pipeline-name)/jobs/$(cat meta/build-job-name)/builds/$(cat meta/build-name)"
                BUILD_RESULTS="$WORKDIR/test_results/build-$BUILD_NAME"
                mkdir -p "$BUILD_RESULTS"

                echo -e "${INFO}copy e2e tests from juno.git to ./e2e ${NC}"
                cp -r ./juno.git/e2e .
                echo -e "${INFO}copy mount-test.html to test_data ${NC}"
                cp ./juno.git/ci/assets-server/mount-test.html ./test_data/      
                echo -e "${INFO}create empty build-log.json ${NC}"
                echo '[]' > test_results/build-log.json
                echo -e "${INFO}create serve.config.json ${NC}"
                echo -e "${INFO}this is needed to avoid clean urls, we want to have extensions like .html ${NC}"
                echo '{"cleanUrls": false}' > /tmp/serve.config.json
                echo -e "${INFO}run server in test_data ${NC}"
                serve ./test_data -n -u -p 3000 -c /tmp/serve.config.json & sleep 3 

                echo -e "${INFO}=== RUN MOUNT TESTS ===\n ${NC}"
                cd e2e
                # loop over assets in pending_assets to avoid unnesseray tests                
                for f in ../pending_assets/**/*/package.json; do 
                NAME=$(cat $f | jq -r '.name') 
                VERSION=$(cat $f | jq -r '.version') 
                TYPE_FOLDER=$(basename $(dirname $(dirname $f)))
                ASSET_TEST_RESULTS="$BUILD_RESULTS/$TYPE_FOLDER/$NAME@$VERSION"
                echo -e "${INFO}===TEST $NAME@$VERSION ($TYPE_FOLDER)${NC}" 

                cypress run --spec "cypress/integration/assets-server/mount_asset.spec.js" \
                --browser chrome \
                --env APP_NAME=$NAME,APP_VERSION=$VERSION \
                --config "{\"baseUrl\":\"http://127.0.0.1:3000\",\"screenshotsFolder\":\"$ASSET_TEST_RESULTS/screenshots\",\"videosFolder\":\"$ASSET_TEST_RESULTS/videos\"}"

                # Check the exit status of the cp command 
                if [ $? -eq 0 ]; then 
                STATUS="passed"
                mkdir -p "../passed/$TYPE_FOLDER" && \
                cp -r $(dirname $f) "../passed/$TYPE_FOLDER/$NAME@$VERSION" 
                else 
                STATUS="failed"
                echo -e "${INFO}===RESULT: $NAME@$VERSION $STATUS ${NC}"
                fi
                jq --arg n "$NAME" --arg v "$VERSION" --arg s "$STATUS" --arg l "$URL" \
                '. += [{"name": $n, "version": $v, "status": $s, "log": $l}]' "$ASSET_TEST_RESULTS/build-log.json" > "$ASSET_TEST_RESULTS/build-log.json.temp" 
                mv "$ASSET_TEST_RESULTS/build-log.json.temp" "$ASSET_TEST_RESULTS/build-log.json" 
                done
                exit 0

      - task: upload-test-result
        file: juno.git/ci/pipelinev4/tasks/swift.yaml
        input_mapping:
          input: test_results
        params:
          COMMAND: "mkdir -p juno/pending-assets-tests && cp -r input/* juno/pending-assets-tests/ && swift upload --skip-identical --changed cypress juno"

      # - task: upload-test-result
      #   file: juno.git/ci/pipelinev4/tasks/swift.yaml
      #   input_mapping:
      #     input: test_results
      #   params:
      #     COMMAND: "UPLOAD"
      #     OPTIONS: "--skip-identical --changed"
      #     CONTAINER: "cypress"
      #     TARGET: "juno/pending-assets-tests"

      # - task: download-test-result
      #   file: juno.git/ci/pipelinev4/tasks/swift.yaml
      #   output_mapping:
      #     output: test_results
      #   params:
      #     COMMAND: "DOWNLOAD"
      #     CONTAINER: "juno-final-assets"
      #     TARGETS: 
      #       - "manifest.json"          
      #       - "build-log.json"          


      - task: upload-passed-and-cleanup
        file: juno.git/ci/pipelinev4/tasks/swift.yaml
        input_mapping:
          input: passed
        params:
          COMMAND: "cd input && swift upload juno-final-assets ."

      - task: exit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/node
              tag: "18-alpine"   
          run:
            path: /bin/sh
            args:
              - -c
              - |
                exit 1

      <%# - task: upload-to-final %>

  - name: download-all-final-assets
    plan:
    - get: juno.git
      trigger: true
      passed: [download-validate-pending-assets]
    - get: assets-server.version    
  - name: build-assets-server-image
    plan:
    - get: juno.git
      trigger: true
      passed: [download-all-final-assets]
  - name: deploy-assets-server-to-s-qa-de-1
    plan:
    - get: juno.git
      trigger: true
      passed: [build-assets-server-image]
  - name: deploy-assets-server-to-qa-de-2
    plan:
      - get: juno.git
        trigger: true  
        passed: [build-assets-server-image]
  - name: e2e-tests-assets-server-s-qa-de-1
    plan:
      - get: juno.git
        trigger: true  
        passed: [deploy-assets-server-to-s-qa-de-1]
  - name: promote-prod-assets-server
    plan:
      - get: juno.git
        trigger: false  
        passed: [e2e-tests-assets-server-s-qa-de-1]
  <%HA_REGIONS.each do |region|%>
  - name: deploy-assets-server-to-<%= region %>
    plan:
      - get: juno.git
        trigger: true  
        passed: [promote-prod-assets-server]
  - name: e2e-tests-assets-server-<%= region %>
    plan:
      - get: juno.git
        trigger: true  
        passed: [deploy-assets-server-to-<%= region %>]
  <% end %>  