# prettier-ignore
<%
  HA_REGIONS = [
    "eu-de-1",
    "eu-de-2",
    "eu-nl-1",
    "ap-ae-1",
    "ap-jp-2",
    "ap-au-1",
    "la-br-1",
    "na-us-1",
    "na-us-2"
  ]
%>

resources:
  - name: juno.git
    type: git
    icon: github
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))   
<% 
  # this step combines all assets that where build and uploaded before to swift
  # for that we use nginx image and copy all assets (that where build in the step before) into /usr/share/nginx/html/
  # this image will be deployed as asset server 

  # Important! 
  # If the asset-server.image was not build before 
  # 1) comment the parts in the dockerfile where the image is needed to copy old stuff over
  # 2) you need first build the libs otherwise the build importmap step will fail because 
  #    it will not find the libs
  # 3) if the libs are build and uploaded to swift you can add the apps
  # 4) when the apps are build without problems you can uncomment the parts in 
  #    the dockerfile to store the old versions 
  %>
  

groups: 
  - name: assets-server 
    jobs:
      - download-validate-pending-assets
      - download-all-final-assets
      - build-assets-server-image
      - deploy-assets-server-to-s-qa-de-1
      - deploy-assets-server-to-qa-de-2
      - e2e-tests-assets-server-s-qa-de-1
      - promote-prod-assets-server
      <%HA_REGIONS.each do |region|%>
      - deploy-assets-server-to-<%= region %>
      - e2e-tests-assets-server-<%= region %>
      <% end %> 

jobs:
  - name: download-validate-pending-assets
    plan:
      - get: juno.git
        trigger: true

      - task: download-from-juno-pending-assets
        file: juno.git/ci/shared/swift-download.yaml
        output_mapping:
          download: pending_assets
        params:
          DEBUG: "true"
          CONTAINER: "juno-pending-assets"

      - task: generate-import-map-and-co
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v3-base
              tag: "latest"    
          inputs:
            - name: pending_assets
          outputs:
            - name: importmap_data
          run:
            path: /bin/sh
            args:
              - -c
              - |
                WORKDIR=$(pwd)
                echo "==========WORKDIR: $WORKDIR"
                cd /juno 
                npm run build-libs
                cd $WORKDIR
                mkdir -p ./pending_assets/libs
                # copy libs to pending_assets 
                # some apps are using the libs and we need to have them in the same folder
                for lib in /juno/libs/*; do
                  name=$(basename $lib)
                  cp -r $lib ./pending_assets/libs/"${name}@latest"
                done
                cd pending_assets

                # Generate importmap and manifest only for pending apps and libs
                # this step also generates the externals esm packages
                node /juno/ci/scripts/esm_build/generate_importmap.mjs \
                --node-modules-path=/tmp/ \
                --external-path=./externals \
                --exit-on-error=false \
                --src=./ \
                --base-url="http://localhost:3000" \
                --ignore-externals=false \
                --output=./importmap.json  \
                --verbose=false ; \
                \
                node /juno/ci/scripts/generate_manifest.mjs \
                --src=./ \
                --output=./manifest.json \
                --base-url="http://localhost:3000" \
                --verbose=false ;

                exit 1

      - task: test
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/alpine
              tag: "latest"    
          inputs:
            - name: importmap_data

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd importmap_data
                pwd
                ls -la
        
      <%# - task: upload-to-final %>

  - name: download-all-final-assets
    plan:
    - get: juno.git
      trigger: true
      passed: [download-validate-pending-assets]
  - name: build-assets-server-image
    plan:
    - get: juno.git
      trigger: true
      passed: [download-all-final-assets]
  - name: deploy-assets-server-to-s-qa-de-1
    plan:
    - get: juno.git
      trigger: true
      passed: [build-assets-server-image]
  - name: deploy-assets-server-to-qa-de-2
    plan:
      - get: juno.git
        trigger: true  
        passed: [build-assets-server-image]
  - name: e2e-tests-assets-server-s-qa-de-1
    plan:
      - get: juno.git
        trigger: true  
        passed: [deploy-assets-server-to-s-qa-de-1]
  - name: promote-prod-assets-server
    plan:
      - get: juno.git
        trigger: false  
        passed: [e2e-tests-assets-server-s-qa-de-1]
  <%HA_REGIONS.each do |region|%>
  - name: deploy-assets-server-to-<%= region %>
    plan:
      - get: juno.git
        trigger: true  
        passed: [promote-prod-assets-server]
  - name: e2e-tests-assets-server-<%= region %>
    plan:
      - get: juno.git
        trigger: true  
        passed: [deploy-assets-server-to-<%= region %>]
  <% end %>  