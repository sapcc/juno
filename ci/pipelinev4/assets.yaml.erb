# prettier-ignore
<%
  # supported asset types
  SWIFT_CONTAINER_PENDING_ASSETS = "juno-pending-assets"

  # Blacklisted assets e.g. ["whois"]
  BLACKLISTED = []
  ASSETS = Dir["{apps,libs}/**"].map do |file| 
    type,name = file.split("/").last(2)
    [name,{type: type, path: file}]
  end.to_h

  ASSETS = ASSETS.reject{|name,details| BLACKLISTED.include?(name) }
%>

resources:
  - name: juno-assets-server.git
    type: git
    icon: github
    source:
      uri: https://github.com/sapcc/juno-assets-server.git
      branch: main
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))
  
  <%# ASSETS SOURCE GIT %>
  <% ASSETS.each do |name,details| %>
  - name: <%=details[:type]%>-<%= name %>.git
    type: git
    icon: github
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["<%=details[:path]%>","libs","package.json","e2e", ".yarn"]
      # "ci"
      # "ci/scripts"
      # "ci/shared"
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))
  
  <% end %>


groups: 
  - name: assets 
    jobs:
      <% ASSETS.each do |name,details| %>
      - build-upload-<%= details[:type] %>-<%= name %>
      <% end %>

jobs:
  # ============================================================= 
  # BUILD ASSETS IMAGES

  # Assets build
  <% ASSETS.each do |name,details| %>
  - name: build-upload-<%= details[:type] %>-<%= name %>
    public: true
    plan:
      - get: juno-assets-server.git
      - get: <%= details[:type] %>-<%= name %>.git
        trigger: true
      - get: base.image

      - task: build
        image: base.image
        input_mapping: 
          latest: <%= details[:type] %>-<%= name %>.git
        config:
          inputs:
            - name: latest
          outputs:
            - name: build_result
          platform: linux
          run:
            path: /bin/sh
            # NOTE use -cx for debugging, than you can see the commands that where tirggered in the log
            args:
              - -c
              - |
                set -e 
                ls -la
                # TODO: this need a lot of runtime, move that stuff into asset_build.sh after version check
                echo "sync all node_modules from /juno/ to ./latest/"
                rsync -am --include='*/' --include='node_modules/***' --exclude='*' /juno/ ./latest
                cd ./latest
                echo "update node modules -> npm install --silent"
                npm install --silent
                echo "build app <%= details[:type] %>-<%= name %> and write to build_result/"
                ./ci/scripts/asset_build.sh --asset-name <%= name %> --asset-type <%= details[:type] %> --output-path ../build_result <% if details[:type] == "lib" %> --last-build-path ../last_build <% end %>
                
      
      - task: upload-to-<%=SWIFT_CONTAINER_PENDING_ASSETS%>
        file: juno-assets-server.git/pipeline/tasks/swift-upload.yaml
        input_mapping:
          input: build_result
        params:
          CONTAINER: "<%=SWIFT_CONTAINER_PENDING_ASSETS%>"

  <% end %> 
