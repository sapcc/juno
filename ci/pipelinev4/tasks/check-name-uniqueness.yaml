platform: linux

image_resource:
  type: docker-image
  source:
    repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v3-ci-helper
    tag: "latest"

inputs:
  - name: assets
  - name: final_metadata
outputs:
  - name: passed
  - name: test_results

params:

# describe the code
# 1. check if the name, version and repository are set in the package.json file
# 2. check if the file defined in main or module exists
run:
  path: /bin/bash
  args:
    - -c
    - |
      # 1. if manifest.json is not present, then the asset is new (SUCCESS)
      # 2. if the name is not present in manifest.json, then the asset is new (SUCCESS)
      # 3. if the name is present in manifest.json AND the repository is different, THEN it is not allowed to be published (FAILURE)
      # 4. if the name is present in manifest.json AND the repository is the same AND the version is higher, THEN it is an update (SUCCESS)
      # 5. if the name is present in manifest.json AND the repository is the same AND the version is the same, THEN it is not allowed to be published (FAILURE)


      # 1. check
      if [ ! -f final_metadata/manifest.json ]; then
        # initial state
        echo "${SUCCESS}manifest.json is not present, assets are new ${NC}"
        cp -r assets/* passed/
        exit 0
      fi

      for f in assets/**/*/package.json; do
        PASSED=true
        NAME=$(jq -r '.name' $f)
        REPOSITORY=$(jq -r '.repository' $f)
        VERSION=$(jq -r '.version' $f)
        TYPE_FOLDER=$(basename $(dirname $(dirname $f)))
        echo "${INFO} NAME: $NAME, REPOSITORY: $REPOSITORY, VERSION: $VERSION ${NC}"

        # 2. check 
        if [ $(jq "has(\"$NAME\")" final_metadata/manifest.json) == "false" ]; then
          # initial state
          echo "${SUCCESS}name is not present in manifest.json, asset is new ${NC}"
          mkdir -p passed/$TYPE_FOLDER/$NAME && cp -r $(dirname $f) passed/$TYPE_FOLDER/$NAME
          continue
        fi


        # 3. check
        versions=$(jq -r ".\"$NAME\" | . [] | .version" final_metadata/manifest.json)
        sorted_versions=$(echo "$versions" | tr ' ' '\n' | sort -t. -k1,1n -k2,2n -k3,3n -k4,4n | tr '\n' ' ')
        latest_version=$(echo "$sorted_versions" | awk '{print $NF}')
        latest_package=$(jq -r ".\"$NAME\".\"$latest_version\"" final_metadata/manifest.json)

        LATEST_REPOSITORY=$(echo $latest_package | jq -r '.repository')
        LATEST_VERSION=$(echo $latest_package | jq -r '.version')

        if [ "$REPOSITORY" != "$LATEST_REPOSITORY" ]; then
          echo "${FAIL}repository is different, asset is not allowed to be published ${NC}"
          PASSED=false
          continue
        fi

        # 4. check
        latest_current="$LATEST_VERSION $VERSION"
        max_version=$( echo $latest_current | tr ' ' '\n' | sort -t. -k1,1n -k2,2n -k3,3n -k4,4n | tr '\n' ' ' | awk '{print $NF}')
        
        if [ "$VERSION" != "$LATEST_VERSION" ] && [ "$max_version" == "$VERSION" ] ; then
          echo "${SUCCESS}version is higher, asset is an update ${NC}"
          mkdir -p passed/$TYPE_FOLDER/$NAME && cp -r $(dirname $f) passed/$TYPE_FOLDER/$NAME
          continue
        else
          echo "version is not higher, asset is not allowed to be published"
          PASSED=false
          continue  
        fi        
        
        # 5. check
        if [ "$VERSION" == "$LATEST_VERSION" ]; then
          echo "${FAIL}version is the same, asset is not allowed to be published ${NC}"
          PASSED=false
          continue
        fi
      done
