# Juno is a monorepo containing apps and libs. The packages are managed using npm. 
#
# The build idea:
# we get the entire monorepo and build the required app in the base layer. 
# Then we create a new layer and copy the build results into the target directory. 
# That means the finished image contains only the app bundle and the package.json file.
ARG ASSET_PATH=""
ARG BUILD_DIR=""

FROM keppel.eu-de-1.cloud.sap/ccloud/juno-v2-base:latest AS build 
ARG ASSET_PATH
ARG BUILD_DIR

RUN mkdir -p /tmp/src
ADD . /tmp/src

WORKDIR /juno

RUN node scripts/generate_communication_readme.mjs --path=/juno/$ASSET_PATH

RUN rsync -avu --delete --exclude 'node_modules' "/tmp/src/$ASSET_PATH/" "/juno/$ASSET_PATH"

RUN npm run build-libs
# TEST AND BUILD ASSET
# IGNORE_EXTERNALS=true will results in a bundle which includes all dependencies. 
# This is the case if the jspm cdn is unreachable!!! 
RUN \
  ASSET_NAME=$(jq -r .name /juno/$ASSET_PATH/package.json) ; \ 
  npm install --silent --workspace $ASSET_NAME ; \ 
  npm --workspace $ASSET_NAME run test --if-present ; \
  NODE_ENV=production IGNORE_EXTERNALS=false npm --workspace $ASSET_NAME run build --if-present

# COPY RESULTS OF THE BUILD TO /tmp

# get BUILD_DIR from package.json
# strip `leading` slash from BUILD_DIR and split by / and use first part
# Example: package.json#module = build/esm/index.js
# echo build/esm/index.js | sed -e 's/^\///' | cut -d/ -f1
# Result: build
RUN \
  if [ -z "$BUILD_DIR" ]; then BUILD_DIR=$(jq -r .module /juno/$ASSET_PATH/package.json); fi ; \
  if [ "$BUILD_DIR" = "null" ]; then BUILD_DIR=$(jq -r .main /juno/$ASSET_PATH/package.json); fi ; \
  if [ "$BUILD_DIR" = "null" ]; then BUILD_DIR="build"; else BUILD_DIR="$(echo $BUILD_DIR | sed -e 's/^\///' | cut -d/ -f1)"; fi ; \ 
  echo "===${BUILD_DIR}" ; \
  mkdir -p "/tmp/$ASSET_PATH" ; \
  cp -r "/juno/$ASSET_PATH/$BUILD_DIR" "/tmp/$ASSET_PATH/" ; \
  cp "/juno/$ASSET_PATH/package.json" "/tmp/$ASSET_PATH/package.json" ; \
  cp "/juno/$ASSET_PATH/COMMUNICATOR.md" "/tmp/$ASSET_PATH/COMMUNICATOR.md" ; \
  cp "/juno/$ASSET_PATH/README.md" "/tmp/$ASSET_PATH/README.md"  > /dev/null || : #ignore errors

RUN cd "/tmp/$ASSET_PATH" && tar -czf package.tgz . 

RUN ls -la "/tmp/$ASSET_PATH/$BUILD_DIR"

# asset layer
# COPY RESULT INTO FINAL IMAGE under /dist
FROM scratch as asset 
ARG ASSET_PATH

LABEL source_repository="https://github.com/sapcc/juno/$ASSET_PATH"

WORKDIR /

# copy build results from base image to dist
COPY --from=build "/tmp/$ASSET_PATH" /dist

