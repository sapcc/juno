# Here is a description of how this image is built. We use the Juno-Base image, which 
# includes all the necessary scripts and caches the node_modules (for performance reasons). 
# Additionally, we use the (modified by us) Cypress image to run mount tests. 
# Finally, we build the final Assets Server Image from the Nginx image.
#
# First, we fetch the Base Image (Build Layer) and copy the context to /tmp/latests. 
# In this case, the context is provided by the pipeline and consists of the built assets,
# Juno Apps, libs, and 3rd Party Apps.
#
# In the second step, based on these assets and their dependencies, we generate the Importmap 
# and Manifest along with the converted external packages.
#
# Next, in the second Build Layer, we fetch the Cypress Image and copy the results from the first 
# layer (apps, libs, externals, importmap.json, manifest.json) to /tmp/latest. Furthermore, 
# we copy the e2e directory from Base to /tmp/e2e.
#
# The idea is to simulate the final server using the serve npm package. Therefore, in this step, 
# we need to create the mount-test.html file and install serve. To execute the Cypress Test during 
# the build, we need to start serve and cypress in a single RUN Layer. We run the mount test for 
# each asset from the context. If the test is positive, it is included in the passed apps. 
# Otherwise, we ignore it. We keep track of this in the assetsBuildLog file, which we later 
# use in the manifest.
#
# Finally, we build the final Server Image and only use the assets that have passed the tests.

ARG BASE_URL_PLACEHOLDER="%BASE_URL%"
ARG EXIT_ON_ERROR="true"
ARG VERBOSE="false"

# Cypress image
FROM keppel.eu-de-1.cloud.sap/ccloud/cypress-client:latest AS cypress

# Latest assets server image
# FIRSTRUN!
# NOTE: if this image does not exist 
#       this is the case if the image was not build before
#       comment out this line for the first run
# TODO: change to v3 when switching to this version
FROM keppel.eu-de-1.cloud.sap/ccloud/juno-v3-assets-server:latest AS lastbuild

# Base image
########################### BASE ################################
FROM keppel.eu-de-1.cloud.sap/ccloud/juno-v3-base:latest AS base 
# Create a directory for the latest assets
RUN mkdir -p /tmp/latest

# copy all app and lib builds (from dist) to tmp/latest  
# input is comming from the pipeline

# -> /apps/whois/build, package.json
# -> /apps/volta/build, package.json
# -> /libs/juno-ui-components/build, package.json
ADD . /tmp/latest

# set the working directory to /tmp/latest
WORKDIR /tmp/latest
######################## END BASE ###############################


####################### TEST FILES ############################
FROM base AS test-importmap
ARG EXIT_ON_ERROR="false"
ARG VERBOSE="false"
ARG BASE_URL_PLACEHOLDE="http://localhost:3000"

# Generate importmap and manifest only for latest apps and libs
# this step also generates the externals esm packages
RUN \
  set -e ; \
  node /juno/ci/scripts/esm_build/generate_importmap.mjs \
  --node-modules-path=/tmp/ \
  --external-path=externals \
  --exit-on-error=$EXIT_ON_ERROR \
  --src=./ \
  --base-url=$BASE_URL_PLACEHOLDE \
  --ignore-externals=false \
  --output=./importmap.json  \
  --verbose=$VERBOSE ; \
  \
  node /juno/ci/scripts/generate_manifest.mjs \
  --src=./ \
  --output=./manifest.json \
  --base-url=$BASE_URL_PLACEHOLDER \
  --verbose=$VERBOSE ;
###################### END IMPORTMAP MANIFEST EXTERNALS ############################


###################### CYPRESS CLIENT ############################
FROM cypress AS cypress-client 
# copy the e2e directory from the base image to /tmp/e2e
COPY --from=base /juno/e2e /tmp/e2e
# copy the latest assets from the base image to /tmp/latest
COPY --from=test-importmap /tmp/latest /tmp/latest
# copy mount-test.html from the base image to /tmp/latest
COPY --from=base /juno/ci/assets-server/mount-test.html /tmp/latest/mount-test.html

# set the working directory to /tmp/e2e
WORKDIR /tmp/latest 

# install serve and jq
RUN apt-get update && apt-get install -y jq ; npm i -g serve   

# create a serve config file, create a directory for the passed assets and run 
# the mount test for each asset

RUN mkdir -p /tmp/passed /tmp/build ; \
  echo '[]' > /tmp/build/log.json ; \
  echo '{"cleanUrls": false}' > /tmp/serve.config.json ; \
  echo "=== RUN MOUNT TESTS ===\n" ; \
  serve -c /tmp/serve.config.json & sleep 5 ; \
  cd /tmp/e2e/ ; \
  for f in /tmp/latest/**/*/package.json; do \
  NAME=$(cat $f | jq -r '.name') ; \
  VERSION=$(cat $f | jq -r '.version') ; \
  echo "$NAME@$VERSION" ; \
  mkdir -p "/tmp/build/$NAME@$VERSION" ; \
  TYPE_FOLDER=$(basename $(dirname $(dirname $f))) ; \
  cypress-cloud --record false -s "cypress/integration/assets-server/mount_asset.spec.js" \
  --ci-build-id "$(date) - MOUNT CI - assets-qa-tests - chrome" \
  --browser chrome \
  --env APP_NAME=$NAME,APP_VERSION=$VERSION \
  --config baseUrl="http://localhost:3000" , screenshotsFolder="/tmp/build/$NAME@$VERSION" ; \ 
  # Check the exit status of the cp command \
  if [ $? -eq 0 ]; then \
  cp -r $(dirname $f) /tmp/passed/$TYPE_FOLDER/ && \ 
  STATUS="passed" ; \
  else \
  STATUS="failed" ; \
  fi ; \
  echo "$NAME@$VERSION $STATUS" && \
  jq --arg n "$NAME" --arg v "$VERSION" --arg s "$STATUS" --arg l "/build-log/$NAME@$VERSION" \
  '. += [{"name": $n, "version": $v, "status": $s, "log": $l}]' /tmp/build/log.json > /tmp/build/log.json.temp && \
  mv /tmp/build/log.json.temp /tmp/build/log.json ; \
  done

###################### END CYPRESS CLIENT ############################

####################### FINAL FILES ############################
FROM base AS final-files
ARG EXIT_ON_ERROR="true"
ARG VERBOSE="false"
ARG BASE_URL_PLACEHOLDER

# create folder in tmp for merged assets
RUN mkdir -p /tmp/final 
# copy old versions of assets to current layer
# FIRSTRUN!
# NOTE: if this image does not exist 
#       this is the case if the image was not build before
#       comment out this line for the first run
COPY --from=lastbuild /usr/share/nginx/html /tmp/final
# copy passed assets from the cypress-client to /tmp/passed
COPY --from=cypress-client /tmp/passed /tmp/passed
COPY --from=cypress-client /tmp/build /tmp/build
WORKDIR /tmp/passed

RUN pwd
# delete old assets. Use it once to clean up the old assets.
# RUN rm -rf /tmp/final/externals/*

# merge latest assets over the old assets 
RUN \
  for PACKAGE in ./**/*/package.json; do \
  NAME=$(jq -r .name $PACKAGE); \
  VERSION=$(jq -r .version $PACKAGE); \
  # dir is something like ./libs/juno-ui-components@1.1.5
  DIR=$(dirname $PACKAGE); \
  # asset path is then ./libs
  ASSET_PATH=$(dirname $DIR); \
  rm -rf /tmp/final/$DIR; \
  rm -rf /tmp/final/$ASSET_PATH/$NAME@$VERSION; \
  rm -rf /tmp/final/$ASSET_PATH/$NAME@latest; \
  mkdir -p /tmp/final/$ASSET_PATH/$NAME@$VERSION; \ 
  cp -r $DIR/* /tmp/final/$ASSET_PATH/$NAME@$VERSION/; \
  mkdir -p /tmp/final/$ASSET_PATH/$NAME@latest; \
  cp -r $DIR/* /tmp/final/$ASSET_PATH/$NAME@latest/; \
  done ;

RUN mkdir -p /tmp/final/global && cp /juno/README.md /tmp/final/global/

WORKDIR /tmp/final 

# ADD ci/scripts/generate_importmap.mjs /juno/ci/scripts/generate_importmap.mjs

# delete old importmaps and manifests and obsolete assets (see: ci/obsolete_assets.json
RUN \
  rm -rf externals_* importmap* importmap* ; \
  node /juno/ci/scripts/delete_obsolete_assets.js --manifest=/juno/ci/obsolete_assets.json --src=./

RUN rm -rf externals/npm:*

# Create importmaps and manifest
RUN \
  set -e ; \
  node /juno/ci/scripts/esm_build/generate_importmap.mjs \
  --node-modules-path=/tmp/ \
  --external-path=externals \
  --exit-on-error=$EXIT_ON_ERROR \
  --src=./ \
  --base-url=$BASE_URL_PLACEHOLDER \
  --ignore-externals=false \
  --output=./importmap.json  \
  --verbose=$VERBOSE ; \
  \
  node /juno/ci/scripts/generate_manifest.mjs \
  --src=./ \
  --output=./manifest.json \
  --base-url=$BASE_URL_PLACEHOLDER \
  --assets-build-log=/tmp/build/log.json \
  --verbose=$VERBOSE ;


RUN ls -la externals ; pwd ; head -20 manifest.json ; head -20 importmap.json
# RESULTS
# /tmp/final/apps/whois@version/files
# /tmp/final/apps/volta/files
# /tmp/final/libs/juno-ui-components/files
# /tmp/final/assets/static files
# /tmp/final/importmap.json
# /tmp/final/importmap.dev.json
# /tmp/final/manifest.json

# Check the integrity of the file structure
RUN chmod +x /juno/ci/scripts/check_file_integrity.sh && \
  /juno/ci/scripts/check_file_integrity.sh global apps libs assets externals index.html mount-test.html manifest.json importmap.json

# # create self signed dummy certificate and key
# RUN apk add openssl ; openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 \
#   -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=dummy" \
#   -keyout /tmp/tls.key  -out /tmp/tls.crt

############### END FINAL IMPORTMAP ############################

############### FINAL SERVER IMAGE ############################
FROM keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/nginx:alpine AS server
ARG BASE_URL_PLACEHOLDER

LABEL source_repository="https://github.com/sapcc/juno"

# delete default html files of nginx
RUN rm -rf /usr/share/nginx/html 
# copy tls certificate and key
# COPY --from=base /tmp/tls.crt /tmp/tls.key /etc/ssl/juno/ 
# create self signed dummy certificate and key
RUN mkdir -p /etc/ssl/juno ; apk add openssl ; openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 \
  -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=dummy" \
  -keyout /etc/ssl/juno/tls.key  -out /etc/ssl/juno/tls.crt


# copy from final-importmap generated files, importmap.json, manifest.json, externals and assets
COPY --from=final-files /tmp/final /usr/share/nginx/html
# copy from cypress-client generated files, passed and build
COPY --from=cypress-client /tmp/build /usr/share/nginx/html/build-log
# copy index.html from base image to /usr/share/nginx/html
COPY --from=base /juno/ci/assets-server/index.html /usr/share/nginx/html/index.html
# copy nginx config from base image to /etc/nginx/conf.d/default.conf
COPY --from=base /juno/ci/assets-server/nginx.config /etc/nginx/conf.d/default.conf
# replace base url placeholder in nginx config with actual base url placeholder
RUN sed -i -e "s/__BASE_URL_PLACEHOLDER__/${BASE_URL_PLACEHOLDER}/g" /etc/nginx/conf.d/default.conf

WORKDIR /usr/share/nginx/html
# default command is nginx
# CMD nginx -g "daemon off;"