# prettier-ignore



jobs:
  # for info only
  - name: README
    serial: true
    plan:
      - task: describe-this-pipeline
        config:
          platform: "linux"
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/alpine
              tag: latest
          run:
            path: /bin/echo
            args:
              - -e
              - '\tThis pipeline is defined at: https://github.com/sapcc/juno/ci/\n\n'
              - '\tManage Juno images: https://keppel.eu-de-1.cloud.sap/ccloud/juno-dashboard\n'

  # build the test image if Dockerfile.test changes
  - name: build unit-test-image
    public: true
    plan:
      - get: test-image-source.git
        trigger: true

      - put: juno-unit-test.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: test-image-source.git
          dockerfile: test-image-source.git/ci/Dockerfile.test

  # run unit tests for dashboard sources
  - name: unit-test dashboard
    public: true
    plan:
      - get: juno-unit-test.image
        passed: ["build unit-test-image"]
        trigger: true
      - get: app-dashboard.git
        trigger: true

      - task: unit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud/juno-unit-test
              tag: "latest"
          inputs:
            - name: app-dashboard.git
              path: /app/juno

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd $PWD/app/juno/apps/dashboard
                ls -la
                yarn --dev && CI=true yarn test

  # build dashboard image and push it to keppel
  - name: build dashboard
    serial: true
    plan:
      - in_parallel:
          - get: app-dashboard.git
            passed: [unit-test dashboard]
            trigger: true
          - put: dashboard.version
      - in_parallel:
          - put: juno-dashboard.image
            params:
              tag_as_latest: true
              cache: true
              cache_tag: "latest"
              build: app-dashboard.git
              dockerfile: app-dashboard.git/ci/Dockerfile.dashboard
              tag: dashboard.version/version
            get_params:
              skip_download: true

  # scan dashboard image for vulnerabilities
  - name: vscan dashboard
    serial: true
    plan:
      - in_parallel:
          - get: secrets.git
            params:
              depth: 100
          - get: dashboard.version
            passed: [build dashboard]
            trigger: true
      - task: scan-image
        file: secrets.git/ci/shared/task-vscan.yaml
        input_mapping:
          image.version: dashboard.version
        params:
          IMAGE_NAME: keppel.eu-de-1.cloud.sap/ccloud/juno-dashboard

  # run unit tests for each app in /apps
  
  - name: unit-test auth
    public: true
    plan:
      - get: juno-unit-test.image
        passed: ["build unit-test-image"]
        trigger: true
      - get: app-auth.git
        trigger: true

      - task: unit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud/juno-unit-test
              tag: "latest"
          inputs:
            - name: app-auth.git
              path: /app/juno

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd $PWD/app/juno/apps/auth
                ls -la
                yarn --dev && CI=true yarn test

  # build image for each app in /apps
  # we tag this images as latest. App images only serve as a buffer 
  # to be used in the next step. After that, they are no longer used. 
  - name: build auth
    public: true
    plan:
      - get: app-auth.git
        passed: ["unit-test auth"]
        trigger: true

      - put: juno-auth.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: app-auth.git/apps/auth
          dockerfile: app-auth.git/ci/Dockerfile.app

  
  - name: unit-test auth-2
    public: true
    plan:
      - get: juno-unit-test.image
        passed: ["build unit-test-image"]
        trigger: true
      - get: app-auth-2.git
        trigger: true

      - task: unit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud/juno-unit-test
              tag: "latest"
          inputs:
            - name: app-auth-2.git
              path: /app/juno

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd $PWD/app/juno/apps/auth-2
                ls -la
                yarn --dev && CI=true yarn test

  # build image for each app in /apps
  # we tag this images as latest. App images only serve as a buffer 
  # to be used in the next step. After that, they are no longer used. 
  - name: build auth-2
    public: true
    plan:
      - get: app-auth-2.git
        passed: ["unit-test auth-2"]
        trigger: true

      - put: juno-auth-2.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: app-auth-2.git/apps/auth-2
          dockerfile: app-auth-2.git/ci/Dockerfile.app

  
  - name: unit-test widget-loader
    public: true
    plan:
      - get: juno-unit-test.image
        passed: ["build unit-test-image"]
        trigger: true
      - get: app-widget-loader.git
        trigger: true

      - task: unit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud/juno-unit-test
              tag: "latest"
          inputs:
            - name: app-widget-loader.git
              path: /app/juno

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd $PWD/app/juno/apps/widget-loader
                ls -la
                yarn --dev && CI=true yarn test

  # build image for each app in /apps
  # we tag this images as latest. App images only serve as a buffer 
  # to be used in the next step. After that, they are no longer used. 
  - name: build widget-loader
    public: true
    plan:
      - get: app-widget-loader.git
        passed: ["unit-test widget-loader"]
        trigger: true

      - put: juno-widget-loader.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: app-widget-loader.git/apps/widget-loader
          dockerfile: app-widget-loader.git/ci/Dockerfile.app

  

  # this step combines all app images
  # for that we use nginx image and copy all builded apps (in the step before)
  # into /usr/share/nginx/html/
  # this image will be deployed as CDN server
  - name: combine apps
    public: true
    plan:
      
      - get: app-auth.git
        passed: ["build auth"]
        trigger: true
      
      - get: app-auth-2.git
        passed: ["build auth-2"]
        trigger: true
      
      - get: app-widget-loader.git
        passed: ["build widget-loader"]
        trigger: true
        
      - get: ci.git  
      - put: cdn.version
      
      - in_parallel:
        - task: copy build of auth
          config:
            platform: linux
            image_resource:
              type: registry-image
              source: 
                repository: keppel.eu-de-1.cloud.sap/ccloud/juno-auth
                tag: "latest"
            run:
              path: /bin/sh
              args:
                - -c
                - |
                  VERSION=$(cat /app/package.json | grep version | sed 's/^.*"version": "\([^"]*\).*$/\1/' | sed 's/\./_/g')
                  cp -r /app/build ./auth-output/$VERSION
            outputs:
              - name: auth-output
      
      - in_parallel:
        - task: copy build of auth-2
          config:
            platform: linux
            image_resource:
              type: registry-image
              source: 
                repository: keppel.eu-de-1.cloud.sap/ccloud/juno-auth-2
                tag: "latest"
            run:
              path: /bin/sh
              args:
                - -c
                - |
                  VERSION=$(cat /app/package.json | grep version | sed 's/^.*"version": "\([^"]*\).*$/\1/' | sed 's/\./_/g')
                  cp -r /app/build ./auth-2-output/$VERSION
            outputs:
              - name: auth-2-output
      
      - in_parallel:
        - task: copy build of widget-loader
          config:
            platform: linux
            image_resource:
              type: registry-image
              source: 
                repository: keppel.eu-de-1.cloud.sap/ccloud/juno-widget-loader
                tag: "latest"
            run:
              path: /bin/sh
              args:
                - -c
                - |
                  VERSION=$(cat /app/package.json | grep version | sed 's/^.*"version": "\([^"]*\).*$/\1/' | sed 's/\./_/g')
                  cp -r /app/build ./widget-loader-output/$VERSION
            outputs:
              - name: widget-loader-output
          

      - task: combine builds
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: 
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/busybox
              tag: "latest"
          inputs: 
            
            - name: auth-output 
            
            - name: auth-2-output 
            
            - name: widget-loader-output 
                
          run:
            path: /bin/sh
            args:
              - -c
              - |
                
                cp -r ./auth-output  ./build/auth;
                
                cp -r ./auth-2-output  ./build/auth-2;
                
                cp -r ./widget-loader-output  ./build/widget-loader;
                
                cd ./build ; OUTPUT='{'; for d in */ ; do OUTPUT="$OUTPUT\"$(basename $d)\":[";  for s in $d*/ ; do OUTPUT="$OUTPUT\"$(basename $s)\"," ;  done ; OUTPUT="${OUTPUT%,}],"  ; done ; OUTPUT="${OUTPUT%,}}"; echo $OUTPUT > manifest.json
                cat manifest.json
                echo $(date) > ./updated_at

          outputs:
            - name: build

      - put: juno-cdn.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: build
          dockerfile: ci.git/ci/Dockerfile.cdn
          tag: cdn.version/version
        get_params:
          skip_download: true

  - name: deploy to s-qa-de-1
    serial: true
    plan:
      - in_parallel:
          - get: dashboard.version
            trigger: true
            passed: ["vscan dashboard"]      
          - get: cdn.version
            trigger: true
            passed: ["combine apps"]
          - get: ci.git
          - get: secrets.git
            params:
              depth: 100 

      - task: generate cdn values.yaml
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: 
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/busybox
              tag: "latest"
          inputs: 
            - name: cdn.version 
          run:
            path: /bin/sh
            args:
              - -c
              - |
                echo "cdn_tag: \"$(cat cdn.version/version)\"" > ./cdn/values.yaml
                cat ./cdn/values.yaml
          outputs:
            - name: cdn

      - task: deploy
        file: secrets.git/ci/shared/task-helm-upgrade.yaml
        input_mapping:
          # we deploy dashboard image with the last created version tag (ImagePullPolicy IfNotPresent)
          # cdn uses latest with ImagePullPolicy Always
          app.version: dashboard.version
          helm-charts.git: ci.git
          extra-values.git: cdn

        params:
          HELM_MAJOR_VERSION: '3'
          CHART_PATH: ci/helm-charts
          RELEASE: juno
          NAMESPACE: juno
          REGION: qa-de-1
          CONTEXT: s-qa-de-1
          TAG_VARIABLE: dashboard.tag
          VALUES: local:globals extra:values.yaml
          KUBELOGON_USER: {{unified-kubernetes-scaleout-username}}
          KUBELOGON_PASSWORD: {{unified-kubernetes-scaleout-password}}
    ensure:
      put: qa-de-1.release

  - name: deploy to s-eu-nl-1
    serial: true
    plan:
      - in_parallel:
          - get: dashboard.version
            passed: ["deploy to s-qa-de-1"]
          - get: cdn.version
            passed: ["deploy to s-qa-de-1"]
          - get: ci.git
          - get: secrets.git
            params:
              depth: 100

      - task: replicate dashboard image to target region
        file: secrets.git/ci/shared/task-replicate-image.yaml
        input_mapping:
          app.version: dashboard.version
        params:
          REGION: eu-nl-1
          IMAGE: juno-dashboard


      - task: replicate cdn image to target region
        file: secrets.git/ci/shared/task-replicate-image.yaml
        input_mapping:
          app.version: cdn.version
        params:
          REGION: eu-nl-1
          IMAGE: juno-cdn    

      - task: generate cdn values.yaml
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: 
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/busybox
              tag: "latest"
          inputs: 
            - name: cdn.version 
          run:
            path: /bin/sh
            args:
              - -c
              - |
                echo "cdn_tag: \"$(cat cdn.version/version)\"" > ./cdn/values.yaml
                cat ./cdn/values.yaml
          outputs:
            - name: cdn

      - task: deploy
        file: secrets.git/ci/shared/task-helm-upgrade.yaml
        input_mapping:
          helm-charts.git: ci.git
          extra-values.git: cdn 
          app.version: dashboard.version

        params:
          HELM_MAJOR_VERSION: '3'
          CHART_PATH: ci/helm-charts
          RELEASE: juno
          NAMESPACE: juno
          REGION: eu-nl-1
          CONTEXT: s-eu-nl-1
          TAG_VARIABLE: dashboard.tag
          VALUES: local:globals extra:values.yaml
          KUBELOGON_USER: {{unified-kubernetes-scaleout-username}}
          KUBELOGON_PASSWORD: {{unified-kubernetes-scaleout-password}}
    ensure:
      put: eu-nl-1.release

resources:
  - name: qa-de-1.release
    type: release
    check_every: 525600h # basically never (check is a no-op anyway)
    source: { region: "qa-de-1" }

  - name: eu-nl-1.release
    type: release
    check_every: 525600h # basically never (check is a no-op anyway)
    source: { region: "eu-nl-1" }


  - name: test-image-source.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["ci/Dockerfile.test"]
      username: sapcc-bot
      password: {{real-github-access-token}}

  - name: app-dashboard.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["apps/dashboard","ci"]
      username: sapcc-bot
      password: {{real-github-access-token}}
 
  
  - name: app-auth.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["apps/auth","ci"]
      username: sapcc-bot
      password: {{real-github-access-token}}      

  - name: juno-auth.image
    type: docker-image
    source:
      username: {{keppel-username}}
      password: {{keppel-password}}
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-auth    
  
  - name: app-auth-2.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["apps/auth-2","ci"]
      username: sapcc-bot
      password: {{real-github-access-token}}      

  - name: juno-auth-2.image
    type: docker-image
    source:
      username: {{keppel-username}}
      password: {{keppel-password}}
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-auth-2    
  
  - name: app-widget-loader.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["apps/widget-loader","ci"]
      username: sapcc-bot
      password: {{real-github-access-token}}      

  - name: juno-widget-loader.image
    type: docker-image
    source:
      username: {{keppel-username}}
      password: {{keppel-password}}
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-widget-loader    
           

  - name: ci.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["ci"]
      username: sapcc-bot
      password: {{real-github-access-token}}     

  - name: secrets.git
    type: git-proxy
    webhook_token: lfkhslkfhs
    check_every: 6h
    source:
      uri: git@github.wdf.sap.corp:cc/secrets.git
      branch: master
      private_key: {{secrets-ssh-key}}

  - name: dashboard.version
    type: time-version-resource
    check_every: 525600h

  - name: cdn.version
    type: time-version-resource
    check_every: 525600h    

  - name: juno-dashboard.image
    type: docker-image
    check_every: 24h
    source:
      username: {{keppel-username}}
      password: {{keppel-password}}
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-dashboard  

  - name: juno-cdn.image
    type: docker-image
    source:
      username: {{keppel-username}}
      password: {{keppel-password}}
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-cdn     

  - name: juno-unit-test.image
    type: docker-image
    check_every: 24h
    source:
      username: {{keppel-username}}
      password: {{keppel-password}}
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-unit-test

resource_types:
  - name: git-proxy
    type: registry-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/sapcc/concourse-git-resource-proxy

  - name: time-version-resource
    type: docker-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud/concourse-time-version-resource
      tag: v2

  - name: release
    type: docker-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud/concourse-release-resource
      tag: v1.1