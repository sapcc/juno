# prettier-ignore

jobs:
  # for info only
  - name: README
    serial: true
    plan:
      - task: describe-this-pipeline
        config:
          platform: "linux"
          image_resource:
            type: docker-image
            source:
              repository: ((keppel-hostname))/ccloud-dockerhub-mirror/library/alpine
              tag: latest
          run:
            path: /bin/echo
            args:
              - -e
              - '\tThis pipeline is defined at: https://github.com/sapcc/juno/ci/\n\n'
              - '\tManage Juno images: https://((keppel-hostname))/ccloud/juno-dashboard\n'

  # build the test image if Dockerfile.test changes
  - name: build unit-test-image
    public: true
    plan:
      - get: test-image-source.git
        trigger: true

      - put: juno-unit-test.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: test-image-source.git
          build_args: 
            KEPPEL_HOSTNAME: {{keppel-hostname}}
          dockerfile: test-image-source.git/ci/Dockerfile.test

  # name: unit tests for juno-ui-components
  - name: unit-test juno-ui-components
    public: true
    plan:
      - get: juno-unit-test.image
        passed: ["build unit-test-image"]
        trigger: true
      - get: lib-juno-ui-components.git
        trigger: true

      - task: unit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ((keppel-hostname))/ccloud/juno-unit-test
              tag: "latest"
          inputs:
            - name: lib-juno-ui-components.git
              path: /app/juno

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd $PWD/app/juno
                yarn workspaces focus juno-ui-components
                CI=true yarn workspace juno-ui-components test
       
  # build juno-ui-components image and push it to keppel
  - name: build juno-ui-components
    serial: true
    plan:
      - in_parallel:
          - get: lib-juno-ui-components.git
            passed: ["unit-test juno-ui-components"]
            trigger: true
          - put: juno-ui-components.version
      - in_parallel:
          - put: juno-ui-components.image
            params:
              tag_as_latest: true
              # cache: true
              cache_tag: "latest"
              build: lib-juno-ui-components.git
              build_args: 
                KEPPEL_HOSTNAME: {{keppel-hostname}}
              dockerfile: lib-juno-ui-components.git/ci/Dockerfile.ui-components
              tag: juno-ui-components.version/version
            # get_params:
            #   skip_download: true

  # run unit tests for dashboard sources
  - name: unit-test dashboard
    public: true
    plan:
      - get: juno-unit-test.image
        passed: ["build unit-test-image"]
        trigger: true
      - get: lib-juno-ui-components.git
        passed: ["unit-test juno-ui-components"]    
      - get: app-dashboard.git
        trigger: true

      - task: unit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ((keppel-hostname))/ccloud/juno-unit-test
              tag: "latest"
          inputs:
            - name: app-dashboard.git
              path: /app/juno

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd $PWD/app/juno
                yarn workspaces focus juno-ui-components dashboard
                yarn workspace juno-ui-components build
                CI=true yarn workspace dashboard test

  # build dashboard image and push it to keppel
  - name: build dashboard
    serial: true
    plan:
      - in_parallel:
          - get: app-dashboard.git
            passed: ["unit-test dashboard"]

            trigger: true
          - put: dashboard.version
      - in_parallel:
          - put: juno-dashboard.image
            params:
              tag_as_latest: true
              cache: true
              cache_tag: "latest"
              build: app-dashboard.git
              build_args: 
                KEPPEL_HOSTNAME: {{keppel-hostname}}
                LIBS: juno-ui-components
              dockerfile: app-dashboard.git/ci/Dockerfile.dashboard
              tag: dashboard.version/version
            get_params:
              skip_download: true

  # scan dashboard image for vulnerabilities
  - name: vscan dashboard
    serial: true
    plan:
      - in_parallel:
          - get: secrets.git
            params:
              depth: 100
          - get: dashboard.version
            passed: [build dashboard]
            trigger: true
      - task: scan-image
        file: secrets.git/ci/shared/task-vscan.yaml
        input_mapping:
          image.version: dashboard.version
        params:
          IMAGE_NAME: ((keppel-hostname))/ccloud/juno-dashboard

  # ******************* MERCURY ******************************
  # run unit tests for dashboard sources
  - name: unit-test mercury
    public: true
    plan:
      - get: juno-unit-test.image
        passed: ["build unit-test-image"]
        trigger: true
      - get: api-mercury.git
        trigger: true

      - task: unit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ((keppel-hostname))/ccloud/juno-unit-test
              tag: "latest"
          inputs:
            - name: api-mercury.git
              path: /app/juno

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd $PWD/app/juno
                yarn workspaces focus mercury
                CI=true yarn workspace mercury test-prod

  # build dashboard image and push it to keppel
  - name: build mercury
    serial: true
    plan:
      - in_parallel:
          - get: api-mercury.git
            passed: ["unit-test mercury"]
            trigger: true
          - put: mercury.version
      - in_parallel:
          - put: juno-mercury.image
            params:
              tag_as_latest: true
              cache: true
              cache_tag: "latest"
              build: api-mercury.git
              build_args: 
                KEPPEL_HOSTNAME: {{keppel-hostname}}
                LIBS: juno-ui-components
              dockerfile: api-mercury.git/ci/Dockerfile.mercury
              tag: mercury.version/version
            get_params:
              skip_download: true
  #*********************** END MERCURY ******************************

  # run unit tests for each app in /apps
  
  - name: unit-test auth
    public: true
    plan:
      - get: juno-unit-test.image
        passed: ["build unit-test-image"]
        trigger: true
      - get: lib-juno-ui-components.git
        passed: ["unit-test juno-ui-components"]    
      - get: app-auth.git
        trigger: true

      - task: unit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ((keppel-hostname))/ccloud/juno-unit-test
              tag: "latest"
          inputs:
            - name: app-auth.git
              path: /app/juno

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd $PWD/app/juno
                yarn workspaces focus juno-ui-components auth
                yarn workspace juno-ui-components build
                CI=true yarn workspace auth test                

  # build image for each app in /apps
  # we tag this images as latest. App images only serve as a buffer 
  # to be used in the next step. After that, they are no longer used. 
  - name: build auth
    public: true
    plan:
      - get: app-auth.git
        passed: ["unit-test auth"]
        trigger: true

      - put: juno-auth.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: app-auth.git
          build_args: 
            APP_NAME: "auth" 
            LIBS: juno-ui-components
            KEPPEL_HOSTNAME: {{keppel-hostname}}
          dockerfile: app-auth.git/ci/Dockerfile.app

  
  - name: unit-test designate
    public: true
    plan:
      - get: juno-unit-test.image
        passed: ["build unit-test-image"]
        trigger: true
      - get: lib-juno-ui-components.git
        passed: ["unit-test juno-ui-components"]    
      - get: app-designate.git
        trigger: true

      - task: unit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ((keppel-hostname))/ccloud/juno-unit-test
              tag: "latest"
          inputs:
            - name: app-designate.git
              path: /app/juno

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd $PWD/app/juno
                yarn workspaces focus juno-ui-components designate
                yarn workspace juno-ui-components build
                CI=true yarn workspace designate test                

  # build image for each app in /apps
  # we tag this images as latest. App images only serve as a buffer 
  # to be used in the next step. After that, they are no longer used. 
  - name: build designate
    public: true
    plan:
      - get: app-designate.git
        passed: ["unit-test designate"]
        trigger: true

      - put: juno-designate.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: app-designate.git
          build_args: 
            APP_NAME: "designate" 
            LIBS: juno-ui-components
            KEPPEL_HOSTNAME: {{keppel-hostname}}
          dockerfile: app-designate.git/ci/Dockerfile.app

  
  - name: unit-test widget-loader
    public: true
    plan:
      - get: juno-unit-test.image
        passed: ["build unit-test-image"]
        trigger: true
      - get: lib-juno-ui-components.git
        passed: ["unit-test juno-ui-components"]    
      - get: app-widget-loader.git
        trigger: true

      - task: unit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ((keppel-hostname))/ccloud/juno-unit-test
              tag: "latest"
          inputs:
            - name: app-widget-loader.git
              path: /app/juno

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd $PWD/app/juno
                yarn workspaces focus juno-ui-components widget-loader
                yarn workspace juno-ui-components build
                CI=true yarn workspace widget-loader test                

  # build image for each app in /apps
  # we tag this images as latest. App images only serve as a buffer 
  # to be used in the next step. After that, they are no longer used. 
  - name: build widget-loader
    public: true
    plan:
      - get: app-widget-loader.git
        passed: ["unit-test widget-loader"]
        trigger: true

      - put: juno-widget-loader.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: app-widget-loader.git
          build_args: 
            APP_NAME: "widget-loader" 
            LIBS: juno-ui-components
            KEPPEL_HOSTNAME: {{keppel-hostname}}
          dockerfile: app-widget-loader.git/ci/Dockerfile.app

  
  - name: unit-test whois
    public: true
    plan:
      - get: juno-unit-test.image
        passed: ["build unit-test-image"]
        trigger: true
      - get: lib-juno-ui-components.git
        passed: ["unit-test juno-ui-components"]    
      - get: app-whois.git
        trigger: true

      - task: unit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ((keppel-hostname))/ccloud/juno-unit-test
              tag: "latest"
          inputs:
            - name: app-whois.git
              path: /app/juno

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd $PWD/app/juno
                yarn workspaces focus juno-ui-components whois
                yarn workspace juno-ui-components build
                CI=true yarn workspace whois test                

  # build image for each app in /apps
  # we tag this images as latest. App images only serve as a buffer 
  # to be used in the next step. After that, they are no longer used. 
  - name: build whois
    public: true
    plan:
      - get: app-whois.git
        passed: ["unit-test whois"]
        trigger: true

      - put: juno-whois.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: app-whois.git
          build_args: 
            APP_NAME: "whois" 
            LIBS: juno-ui-components
            KEPPEL_HOSTNAME: {{keppel-hostname}}
          dockerfile: app-whois.git/ci/Dockerfile.app

  

  # this step combines all app images
  # for that we use nginx image and copy all builded apps (in the step before)
  # into /usr/share/nginx/html/
  # this image will be deployed as CDN server
  - name: combine apps
    public: true
    plan:
      
      - get: app-auth.git
        passed: ["build auth"]
        trigger: true
      
      - get: app-designate.git
        passed: ["build designate"]
        trigger: true
      
      - get: app-widget-loader.git
        passed: ["build widget-loader"]
        trigger: true
      
      - get: app-whois.git
        passed: ["build whois"]
        trigger: true
        
      - get: ci.git  
      - put: cdn.version
      
      - in_parallel:
        - task: copy build of auth
          config:
            platform: linux
            image_resource:
              type: registry-image
              source: 
                repository: ((keppel-hostname))/ccloud/juno-auth
                tag: "latest"
            run:
              path: /bin/sh
              args:
                - -c
                - |         
                  VERSION=$(cat /app/package.json | grep version | sed 's/^.*"version": "\([^"]*\).*$/\1/' | sed 's/\./_/g')
                  cp -r /app/build ./auth-output/$VERSION
                  cp -r /app/build ./auth-output/latest
                   
            outputs:
              - name: auth-output
      
      - in_parallel:
        - task: copy build of designate
          config:
            platform: linux
            image_resource:
              type: registry-image
              source: 
                repository: ((keppel-hostname))/ccloud/juno-designate
                tag: "latest"
            run:
              path: /bin/sh
              args:
                - -c
                - |         
                  VERSION=$(cat /app/package.json | grep version | sed 's/^.*"version": "\([^"]*\).*$/\1/' | sed 's/\./_/g')
                  cp -r /app/build ./designate-output/$VERSION
                  cp -r /app/build ./designate-output/latest
                   
            outputs:
              - name: designate-output
      
      - in_parallel:
        - task: copy build of widget-loader
          config:
            platform: linux
            image_resource:
              type: registry-image
              source: 
                repository: ((keppel-hostname))/ccloud/juno-widget-loader
                tag: "latest"
            run:
              path: /bin/sh
              args:
                - -c
                - |         
                  VERSION=$(cat /app/package.json | grep version | sed 's/^.*"version": "\([^"]*\).*$/\1/' | sed 's/\./_/g')
                  cp -r /app/build ./widget-loader-output/$VERSION
                  cp -r /app/build ./widget-loader-output/latest
                   
            outputs:
              - name: widget-loader-output
      
      - in_parallel:
        - task: copy build of whois
          config:
            platform: linux
            image_resource:
              type: registry-image
              source: 
                repository: ((keppel-hostname))/ccloud/juno-whois
                tag: "latest"
            run:
              path: /bin/sh
              args:
                - -c
                - |         
                  VERSION=$(cat /app/package.json | grep version | sed 's/^.*"version": "\([^"]*\).*$/\1/' | sed 's/\./_/g')
                  cp -r /app/build ./whois-output/$VERSION
                  cp -r /app/build ./whois-output/latest
                   
            outputs:
              - name: whois-output
          

      - task: combine builds
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: 
              repository: ((keppel-hostname))/ccloud-dockerhub-mirror/library/busybox
              tag: "latest"
          inputs: 
            
            - name: auth-output 
            
            - name: designate-output 
            
            - name: widget-loader-output 
            
            - name: whois-output 
                
          run:
            path: /bin/sh
            args:
              - -c
              - |
                
                cp -r ./auth-output  ./build/auth;
                
                cp -r ./designate-output  ./build/designate;
                
                cp -r ./widget-loader-output  ./build/widget-loader;
                
                cp -r ./whois-output  ./build/whois;
                
                echo $(date) > ./updated_at

          outputs:
            - name: build

      - put: juno-cdn.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: build
          build_args: 
            KEPPEL_HOSTNAME: {{keppel-hostname}}
          dockerfile: ci.git/ci/Dockerfile.cdn
          tag: cdn.version/version
        get_params:
          skip_download: true

  - name: deploy to s-qa-de-1
    serial: true
    plan:
      - in_parallel:
          - get: dashboard.version
            trigger: true
            passed: ["vscan dashboard"]      
          - get: mercury.version
            trigger: true
            passed: ["build mercury"]      
          - get: cdn.version
            trigger: true
            passed: ["combine apps"]
          - get: juno-ui-components.version
            trigger: true
            passed: ["build juno-ui-components"]
          - get: ci.git
          - get: secrets.git
            params:
              depth: 100 

      - task: generate additional tags values.yaml
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: 
              repository: ((keppel-hostname))/ccloud-dockerhub-mirror/library/busybox
              tag: "latest"
          inputs: 
            - name: cdn.version 
            - name: juno-ui-components.version
            - name: mercury.version
          run:
            path: /bin/sh
            args:
              - -c
              - |
                printf "cdn: {image_tag: \"$(cat cdn.version/version)\"}\njuno_ui_components: {image_tag: \"$(cat juno-ui-components.version/version)\"}\nmercury: {image_tag: \"$(cat mercury.version/version)\"}" > ./extra-values/values.yaml
                cat ./extra-values/values.yaml
          outputs:
            - name: extra-values

      - task: deploy
        file: secrets.git/ci/shared/task-helm-upgrade.yaml
        input_mapping:
          # we deploy dashboard image with the last created version tag (ImagePullPolicy IfNotPresent)
          # cdn uses latest with ImagePullPolicy Always
          app.version: dashboard.version
          helm-charts.git: ci.git
          extra-values.git: extra-values

        params:
          HELM_MAJOR_VERSION: '3'
          CHART_PATH: ci/helm-charts
          RELEASE: juno
          NAMESPACE: juno
          REGION: qa-de-1
          CONTEXT: s-qa-de-1
          TAG_VARIABLE: dashboard.image_tag
          VALUES: local:globals s-local:juno extra:values.yaml
          KUBELOGON_USER: {{unified-kubernetes-scaleout-username}}
          KUBELOGON_PASSWORD: {{unified-kubernetes-scaleout-password}}

    ensure:
      put: qa-de-1.release

  - name: e2e s-qa-de-1
    serial: true
    plan:           
      - get: dashboard.version
        trigger: true
        passed: ["deploy to s-qa-de-1"]
      - get: cdn.version
        trigger: true  
        passed: ["deploy to s-qa-de-1"]
      - get: juno-ui-components.version
        trigger: true          
        passed: ["deploy to s-qa-de-1"]
      - get: mercury.version
        trigger: true          
        passed: ["deploy to s-qa-de-1"]        
      - get: repo.git

      - task: cypress
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ((keppel-hostname))/ccloud-dockerhub-mirror/cypress/included
              tag: "7.1.0"
          inputs:
            - name: repo.git
              path: /app/juno

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd $PWD/app/juno/e2e
                CYPRESS_BASE_URL=https://juno.qa-de-1.cloud.sap cypress run --spec "cypress/integration/dashboard/*"
                CYPRESS_BASE_URL=https://cdn.juno.qa-de-1.cloud.sap cypress run --spec "cypress/integration/cdn/*"
                CYPRESS_BASE_URL=https://ui.juno.qa-de-1.cloud.sap cypress run --spec "cypress/integration/ui-components/*"
                CYPRESS_BASE_URL=https://ui.juno.qa-de-1.cloud.sap cypress run --spec "cypress/integration/mercury/*"

  - name: deploy to s-eu-nl-1
    serial: true
    plan:
      - in_parallel:
          - get: dashboard.version
            passed: ["e2e s-qa-de-1"]
          - get: cdn.version
            passed: ["e2e s-qa-de-1"]
          - get: juno-ui-components.version
            passed: ["e2e s-qa-de-1"]  
          - get: mercury.version
            passed: ["e2e s-qa-de-1"]              
          - get: ci.git
          - get: secrets.git
            params:
              depth: 100

      - task: replicate dashboard image to target region
        file: secrets.git/ci/shared/task-replicate-image.yaml
        input_mapping:
          app.version: dashboard.version
        params:
          REGION: eu-nl-1
          IMAGE: juno-dashboard

      - task: replicate mercury image to target region
        file: secrets.git/ci/shared/task-replicate-image.yaml
        input_mapping:
          app.version: mercury.version
        params:
          REGION: eu-nl-1
          IMAGE: juno-mercury          

      - task: replicate cdn image to target region
        file: secrets.git/ci/shared/task-replicate-image.yaml
        input_mapping:
          app.version: cdn.version
        params:
          REGION: eu-nl-1
          IMAGE: juno-cdn   

      - task: replicate ui compoents image to target region
        file: secrets.git/ci/shared/task-replicate-image.yaml
        input_mapping:
          app.version: juno-ui-components.version
        params:
          REGION: eu-nl-1
          IMAGE: juno-ui-components        

      - task: generate extra values.yaml
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: 
              repository: ((keppel-hostname))/ccloud-dockerhub-mirror/library/busybox
              tag: "latest"
          inputs: 
            - name: cdn.version 
            - name: juno-ui-components.version
            - name: mercury.version
          run:
            path: /bin/sh
            args:
              - -c
              - |
                printf "cdn: {image_tag: \"$(cat cdn.version/version)\"}\njuno_ui_components: {image_tag: \"$(cat juno-ui-components.version/version)\"}\nmercury: {image_tag: \"$(cat mercury.version/version)\"}" > ./extra-values/values.yaml
                cat ./extra-values/values.yaml
          outputs:
            - name: extra-values

      - task: deploy
        file: secrets.git/ci/shared/task-helm-upgrade.yaml
        input_mapping:
          # we deploy dashboard image with the last created version tag (ImagePullPolicy IfNotPresent)
          # cdn uses latest with ImagePullPolicy Always
          app.version: dashboard.version
          helm-charts.git: ci.git
          extra-values.git: extra-values

        params:
          HELM_MAJOR_VERSION: '3'
          CHART_PATH: ci/helm-charts
          RELEASE: juno
          NAMESPACE: juno
          REGION: eu-nl-1
          CONTEXT: s-eu-nl-1
          TAG_VARIABLE: dashboard.image_tag
          VALUES: local:globals s-local:juno extra:values.yaml
          KUBELOGON_USER: {{unified-kubernetes-scaleout-username}}
          KUBELOGON_PASSWORD: {{unified-kubernetes-scaleout-password}}          
         
    ensure:
      put: eu-nl-1.release


  - name: e2e production
    serial: true
    plan:           
      - get: dashboard.version
        trigger: true
        passed: ["deploy to s-eu-nl-1"]
      - get: cdn.version
        trigger: true          
        passed: ["deploy to s-eu-nl-1"]  
      - get: juno-ui-components.version
        trigger: true          
        passed: ["deploy to s-eu-nl-1"]        
      - get: app-dashboard.git

      - task: cypress
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ((keppel-hostname))/ccloud-dockerhub-mirror/cypress/included
              tag: "7.1.0"
          inputs:
            - name: app-dashboard.git
              path: /app/juno

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd $PWD/app/juno/e2e
                CYPRESS_BASE_URL=https://juno.global.cloud.sap cypress run --spec "cypress/integration/dashboard/*"
                CYPRESS_BASE_URL=https://cdn.juno.global.cloud.sap cypress run --spec "cypress/integration/cdn/*"
                CYPRESS_BASE_URL=https://ui.juno.global.cloud.sap cypress run --spec "cypress/integration/ui-components/*"
    

resources:
  - name: qa-de-1.release
    type: release
    check_every: 525600h # basically never (check is a no-op anyway)
    source: { region: "qa-de-1" }

  - name: eu-nl-1.release
    type: release
    check_every: 525600h # basically never (check is a no-op anyway)
    source: { region: "eu-nl-1" }


  - name: test-image-source.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["ci/Dockerfile.test"]
      username: sapcc-bot
      password: {{real-github-access-token}}

  - name: lib-juno-ui-components.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["libs/juno-ui-components","package.json","ci/Dockerfile.ui-components","e2e"]
      username: sapcc-bot
      password: {{real-github-access-token}}

  - name: app-dashboard.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["apps/dashboard","package.json","libs","ci/Dockerfile.dashboard","e2e"]
      username: sapcc-bot
      password: {{real-github-access-token}}

  - name: api-mercury.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["apis/mercury","package.json","ci/Dockerfile.mercury","e2e"]
      username: sapcc-bot
      password: {{real-github-access-token}}      
 
  
  - name: app-auth.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["apps/auth","package.json","libs","ci/Dockerfile.app","e2e"]
      username: sapcc-bot
      password: {{real-github-access-token}}      

  - name: juno-auth.image
    type: docker-image
    source:
      username: {{keppel-username}}
      password: {{keppel-password}}
      repository: ((keppel-hostname))/ccloud/juno-auth    
  
  - name: app-designate.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["apps/designate","package.json","libs","ci/Dockerfile.app","e2e"]
      username: sapcc-bot
      password: {{real-github-access-token}}      

  - name: juno-designate.image
    type: docker-image
    source:
      username: {{keppel-username}}
      password: {{keppel-password}}
      repository: ((keppel-hostname))/ccloud/juno-designate    
  
  - name: app-widget-loader.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["apps/widget-loader","package.json","libs","ci/Dockerfile.app","e2e"]
      username: sapcc-bot
      password: {{real-github-access-token}}      

  - name: juno-widget-loader.image
    type: docker-image
    source:
      username: {{keppel-username}}
      password: {{keppel-password}}
      repository: ((keppel-hostname))/ccloud/juno-widget-loader    
  
  - name: app-whois.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["apps/whois","package.json","libs","ci/Dockerfile.app","e2e"]
      username: sapcc-bot
      password: {{real-github-access-token}}      

  - name: juno-whois.image
    type: docker-image
    source:
      username: {{keppel-username}}
      password: {{keppel-password}}
      repository: ((keppel-hostname))/ccloud/juno-whois    
           

  - name: repo.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      username: sapcc-bot
      password: {{real-github-access-token}}     

  - name: ci.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["ci","package.json"]
      username: sapcc-bot
      password: {{real-github-access-token}}     

  - name: secrets.git
    type: git-proxy
    webhook_token: lfkhslkfhs
    check_every: 6h
    source:
      uri: git@github.wdf.sap.corp:cc/secrets.git
      branch: "master"
      private_key: {{secrets-ssh-key}}

  - name: dashboard.version
    type: time-version-resource
    check_every: 525600h

  - name: mercury.version
    type: time-version-resource
    check_every: 525600h   

  - name: juno-ui-components.version
    type: time-version-resource
    check_every: 525600h    

  - name: cdn.version
    type: time-version-resource
    check_every: 525600h    

  - name: juno-dashboard.image
    type: docker-image
    check_every: 24h
    source:
      username: {{keppel-username}}
      password: {{keppel-password}}
      repository: ((keppel-hostname))/ccloud/juno-dashboard  

  - name: juno-mercury.image
    type: docker-image
    check_every: 24h
    source:
      username: {{keppel-username}}
      password: {{keppel-password}}
      repository: ((keppel-hostname))/ccloud/juno-mercury        

  - name: juno-ui-components.image
    type: docker-image
    check_every: 24h
    source:
      username: {{keppel-username}}
      password: {{keppel-password}}
      repository: ((keppel-hostname))/ccloud/juno-ui-components        

  - name: juno-cdn.image
    type: docker-image
    source:
      username: {{keppel-username}}
      password: {{keppel-password}}
      repository: ((keppel-hostname))/ccloud/juno-cdn     

  - name: juno-unit-test.image
    type: docker-image
    check_every: 24h
    source:
      username: {{keppel-username}}
      password: {{keppel-password}}
      repository: ((keppel-hostname))/ccloud/juno-unit-test

resource_types:
  - name: git-proxy
    type: registry-image
    check_every: 24h
    source:
      repository: ((keppel-hostname))/ccloud-dockerhub-mirror/sapcc/concourse-git-resource-proxy

  - name: time-version-resource
    type: docker-image
    check_every: 24h
    source:
      repository: ((keppel-hostname))/ccloud/concourse-time-version-resource
      tag: v2

  - name: release
    type: docker-image
    check_every: 24h
    source:
      repository: ((keppel-hostname))/ccloud/concourse-release-resource
      tag: v1.1
