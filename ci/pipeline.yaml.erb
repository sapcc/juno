# prettier-ignore
<%
  ASSETS = [
    { repo: "sapcc/juno", path: "apps/auth" },
    # { repo: "sapcc/juno", path: "apps/assets-overview"},
    # { repo: "sapcc/juno", path: "apps/user-activity"},
    # { repo: "sapcc/juno", path: "apps/volta"},
    # { repo: "sapcc/juno", path: "apps/whois"},
    # { repo: "sapcc/juno", path: "apps/widget-loader"},
    # { repo: "sapcc/juno", path: "apps/dashboard"},
    { repo: "sapcc/juno", path: "apps/playground"},
    # { repo: "cloudoperators/juno", path: "apps/exampleapp"},
    # { repo: "cloudoperators/juno", path: "libs/communicator"},
    # { repo: "cloudoperators/juno", path: "libs/messages-provider"},
    # { repo: "cloudoperators/juno", path: "libs/juno-ui-components"},    
    # { repo: "cloudoperators/juno", path: "libs/policy-engine"},
    # { repo: "cloudoperators/juno", path: "libs/oauth"},
    # { repo: "cloudoperators/juno", path: "libs/url-state-provider"},
    # { repo: "cloudoperators/juno", path: "libs/url-state-router"},
    { repo: "cloudoperators/juno", path: "libs/utils"}
  ]

  def name(asset)
    "#{asset[:repo]}-#{asset[:path]}".gsub("/", "-")
  end
%>

resources:
  <% ASSETS.each do |asset| %>
  - name: <%= name(asset) %>.git
    type: git
    icon: github
    source:
      uri: https://github.com/<%=asset[:repo]%>.git
      branch: ci-v5
      paths: ["<%=asset[:path]%>","libs","package.json","e2e", ".yarn"]
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))
  
  - name: <%= name(asset) %>.version
    type: time-version-resource
    icon: lock
    check_every: 525600h
    source: { key: "<%= name(asset) %>" } # disambiguate from other time-version resources
  <% end %>

  - name: juno.git
    type: git
    icon: github
    source:
      uri: https://github.com/sapcc/juno.git
      branch: ci-v5
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))      

resource_types:
  - name: git-proxy
    type: registry-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud/concourse-git-resource-proxy
      tag: latest

  - name: time-version-resource
    type: docker-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud/concourse-time-version-resource
      tag: v2

  # ============================================================= 
  # BUILD ASSET SERVER IMAGE

jobs:
  # Assets build
  <% ASSETS.each do |asset| %>
  - name: build-<%= name(asset) %>
    public: true
    plan:
      - get: juno.git
      - get: <%= name(asset) %>.git
        trigger: true
      - put: <%= name(asset) %>.version
 
      - task: build
        input_mapping: 
          src: <%= name(asset) %>.git
          juno: juno.git 
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/node
              tag: "20-alpine"

          inputs:
            - name: src
            - name: juno
          outputs:
            - name: build
          run:
            path: /bin/sh
            # NOTE use -cx for debugging, than you can see the commands that where tirggered in the log
            args:
              - -c
              - |
                set -e 
                ls -la
                WORKDIR=$(pwd)
                cd src/<%= asset[:path] %>
                npm install
                npm run test --if-present
                NODE_ENV=production npm run build --if-present

                echo "generate COMMUNICATOR.md in $ASSET_PATH"

                cp package.json "$WORKDIR/build/package.json"

                echo "copy build result to output"
                cp -r "build" "$WORKDIR/build/"
                if [ -f "./COMMUNICATOR.md" ]; then
                  cp -n "./COMMUNICATOR.md" "$WORKDIR/build/COMMUNICATOR.md"
                fi
                cp "./README.md" "$WORKDIR/build/README.md"

                echo "create package.tgz"
                # todo use npm-pack instead https://docs.npmjs.com/cli/v6/commands/npm-pack
                # tar --exclude="package.tgz" -czf package.tgz .
                npm pack
                cp *.tgz "$WORKDIR/build/package.tgz"

                cd $WORKDIR
                node ci/scripts/generate_communication_readme.mjs --verbose --path=src/<%= asset[:path] %> --output=build/COMMUNICATOR.md

  <% end %>       