# prettier-ignore
<%
  ASSETS = {
    "auth": { type: "app", path: "apps/auth" },
    "assets-overview": { type: "app", path: "apps/assets-overview"},
    "communicator": { type: "lib", path: "libs/communicator"},
    "dashboard": { type: "app", path: "apps/dashboard"},
    "doop": { type: "app", path: "apps/doop"},
    "exampleapp": { type: "app", path: "apps/exampleapp"},
    "greenhouse": { type: "app", path: "apps/greenhouse" },
    "heureka": { type: "app", path: "apps/heureka"},
    "juno-ui-components": { type: "lib", path: "libs/juno-ui-components"},
    "maintenance": { type: "app", path: "apps/maintenance"},
    "messages-provider": { type: "lib", path: "libs/messages-provider"},
    "oauth": { type: "lib", path: "libs/oauth"},
    "policy-engine": { type: "lib", path: "libs/policy-engine"},
    "requests": { type: "app", path: "apps/requests" },
    "supernova": { type: "app", path: "apps/supernova"},
    "url-state-provider": { type: "lib", path: "libs/url-state-provider"},
    "url-state-router": { type: "lib", path: "libs/url-state-router"},
    "user-activity": { type: "app", path: "apps/user-activity"},
    "volta": { type: "app", path: "apps/volta"},
    "whois": { type: "app", path: "apps/whois"},
    "widget-loader": { type: "app", path: "apps/widget-loader"}
  }
%>

resources:
  - name: qa-de-1.release
    type: release
    check_every: never 
    source: { region: qa-de-1, tenso_password: ((keystone-user-password/tenso-prod)) }
    expose_build_created_by: true

  - name: eu-nl-1.release
    type: release
    check_every: never 
    source: { region: eu-nl-1, tenso_password: ((keystone-user-password/tenso-prod)) }
    expose_build_created_by: true    

  - name: secrets.git
    type: git-proxy
    webhook_token: lfkhslkfhs
    check_every: 6h
    source:
      uri: git@github.wdf.sap.corp:cc/secrets.git
      branch: "master"
      private_key: ((github-private-key/cc-secrets))

  - name: greenhouse.git
    type: git-proxy
    webhook_token: bleep-bloop
    check_every: 6h
    source:
      uri: https://github.wdf.sap.corp/cc/greenhouse.git
      username: ((github-access-token/ccee-bot))
      password: x-oauth-basic
      branch: main

  <%# BASE IMAGE %>
  - name: base.image
    type: docker-image
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v2-base

  - name: juno.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))      

  <%# ASSETS SERVER %>
  - name: assets-server.version
    type: time-version-resource
    check_every: 525600h
    source: { key: juno-assets-server-version } # disambiguate from other time-version resources

  - name: assets-server.image
    type: docker-image
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v2-assets-server

  <%# UI COMPONENTS STORYBOOK%>
  - name: ui-storybook.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["libs/juno-ui-components","package.json","ci/Dockerfile.ui.storybook","e2e", ".yarn"]
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))
  
  - name: ui-storybook.version
    type: time-version-resource
    check_every: 525600h
    source: { key: juno-ui-storybook-version } # disambiguate from other time-version resources

  - name: ui-storybook.image
    type: docker-image
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v2-ui-storybook

  <%# HOSTING %>
  - name: hosting.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["ci/Dockerfile.hosting","ci/pipeline.yaml.erb"]
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))
  
  - name: hosting.version
    type: time-version-resource
    check_every: 525600h
    source: { key: juno-hosting-version } # disambiguate from other time-version resources

  - name: hosting.image
    type: docker-image
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v2-hosting

  <%# ASSETS SOURCE GIT %>
  <% ASSETS.each do |name,details| %>
  - name: <%=details[:type]%>-<%= name %>.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["<%=details[:path]%>","package.json","ci/Dockerfile.asset","e2e", ".yarn"]
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))
      
  - name: <%=details[:type]%>-<%= name %>.image
    type: docker-image
    check_every: 24h
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v2-<%=details[:type]%>-<%= name %>   
  <% end %>

resource_types:
  - name: git-proxy
    type: registry-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/sapcc/concourse-git-resource-proxy

  - name: time-version-resource
    type: docker-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud/concourse-time-version-resource
      tag: v2

  - name: release
    type: docker-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud/concourse-release-resource
      tag: v2.latest

  - name: github-release
    type: docker-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud/concourse-github-release-resource  


jobs:
  <%# for info only %>
  - name: readme
    serial: true
    plan:
      - task: describe-this-pipeline
        config:
          platform: "linux"
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/alpine
              tag: latest
          run:
            path: /bin/echo
            args:
              - -e
              - '\tThis pipeline is defined at: https://github.com/sapcc/juno/ci/\n\n'
              - '\tManage Juno images: https://keppel.eu-de-1.cloud.sap/ccloud/juno\n'

  <%# BUILD BASE IMAGE %>
  - name: build-base-image
    public: true
    plan:
      - get: juno.git
        trigger: true

      - put: base.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: juno.git
          dockerfile: juno.git/ci/Dockerfile.base

  <%# run unit tests for each asset and build %>
  <% ASSETS.each do |name,details| %>
  - name: build-<%= details[:type] %>-<%= name %>
    public: true
    plan:
      - get: <%=details[:type]%>-<%= name %>.git
        trigger: true

      - put: <%=details[:type]%>-<%= name %>.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: <%=details[:type]%>-<%= name %>.git
          build_args: 
            ASSET_NAME: "<%= name %>" 
            ASSET_PATH: "<%= details[:path] %>"
            BUILD_DIR: "<%= details[:build] %>"
          dockerfile: <%=details[:type]%>-<%= name %>.git/ci/Dockerfile.asset
        get_params:
          skip_download: true  
  <% end %>      


  <% 
  # this step combines all app images
  # for that we use nginx image and copy all built apps (in the step before)
  # into /usr/share/nginx/html/
  # this image will be deployed as CDN server 
  %>
  - name: build-assets-server
    public: true
    plan:
      <% ASSETS.each do |name, details|%>
      - get: <%=details[:type]%>-<%= name %>.image
        params: 
          rootfs: true # mount image contents under /rootfs.tar
        trigger: true 
        # passed: [build-<%= details[:type] %>-<%= name %>]
      <% end %>
      - get: juno.git        
        passed: [build-base-image]
      - put: assets-server.version  

      <%# COPY ALL BUILDS TO dist %>
      - task: combine-builds
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/busybox }
          inputs: 
            <%# this is important we mount the image here as 
                input that we can untar it in the run below  
                to combine all together in the dist output
                that we can use in the assets-server image build%> 
            <% ASSETS.each do |name,details| %>
            - name: <%=details[:type]%>-<%= name %>.image
            <% end %>
            - name: juno.git 
          run:
            path: /bin/sh
            args:
              - -c
              - |
                <% ASSETS.each do |name,details| %>
                echo "add <%=details[:type]%>-<%= name %> to ./dist/<%=details[:type]%>s/<%= name %>"
                mkdir -p ./dist/<%=details[:type]%>s/<%= name %> 
                mkdir -p /tmp/<%=details[:type]%>-<%= name %>
                # Important! here we untar the asset image that we defined as input in the task 
                tar -xf ./<%=details[:type]%>-<%= name %>.image/rootfs.tar -C /tmp/<%=details[:type]%>-<%= name %>
                # Copy the build over to ./dist/app or ./dist/lib related to the type
                cp -r /tmp/<%=details[:type]%>-<%= name %>/dist/* ./dist/<%=details[:type]%>s/<%= name %>/
                ls -all ./dist/<%=details[:type]%>s/<%= name %>/
                echo "====================="
                <% end %>
                echo "add static assets ./dist/assets"
                cp -r ./juno.git/assets ./dist
          outputs:
            - name: dist
      # to serve our js, css and stattic assets this step will add all the created data 
      # in dist/ to the nginx image in /usr/share/nginx/html
      - put: assets-server.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          # root for docker build, its using the output dir from the step before
          build: dist
          dockerfile: juno.git/ci/Dockerfile.assets.server
          tag: assets-server.version/version
          build_args: 
            PROVIDERS: "jspm"
            DEFAULT_PROVIDER: "jspm"
        get_params:
          skip_download: true   

  <%# build ui components storybook image and push it to keppel%>
  - name: build-ui-storybook
    serial: true
    plan:
      - in_parallel:
          - get: ui-storybook.git
            trigger: true
          - put: ui-storybook.version
      - in_parallel:
          - put: ui-storybook.image
            params:
              tag_as_latest: true
              # cache: true
              cache_tag: "latest"
              build: ui-storybook.git
              build_args: 
                KEPPEL_HOSTNAME: keppel.eu-de-1.cloud.sap
              dockerfile: ui-storybook.git/ci/Dockerfile.ui.storybook
              tag: ui-storybook.version/version
            # get_params:
            #   skip_download: true

  <%# BUILD HOSTING %>
  - name: build-hosting
    serial: true
    plan:
      - in_parallel:
          - get: hosting.git
            trigger: true
          - put: hosting.version
      - in_parallel:
          - put: hosting.image
            params:
              tag_as_latest: true
              # cache: true
              cache_tag: "latest"
              build: hosting.git
              build_args: 
                KEPPEL_HOSTNAME: keppel.eu-de-1.cloud.sap
              dockerfile: hosting.git/ci/Dockerfile.hosting
              tag: hosting.version/version
            # get_params:
            #   skip_download: true

  <%# DEPLOY ASSETS SERVER%>
  - name: deploy-to-s-qa-de-1
    serial: true
    plan:
      - in_parallel:
          - get: assets-server.version
            trigger: true
            passed: ["build-assets-server"]
          - get: ui-storybook.version
            trigger: true
            passed: ["build-ui-storybook"]            
          - get: hosting.version
            trigger: true
            passed: ["build-hosting"]            
          - get: juno.git
          - get: secrets.git
            params:
              depth: 100 

      - task: generate-additional-values.yaml
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: 
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/busybox
              tag: "latest"
          inputs: 
            - name: assets-server.version 
            - name: ui-storybook.version
            - name: hosting.version
          run:
            path: /bin/sh
            args:
              - -c
              - |
                echo "build json with tags for every image"
                printf "\
                global: \n
                  assets_server_image_tag: \"$(cat assets-server.version/version)\"\n\
                  ui_storybook_image_tag: \"$(cat ui-storybook.version/version)\"\n\
                  hosting_image_tag: \"$(cat hosting.version/version)\"\n\
                " > ./extra-values/values.yaml

                cat ./extra-values/values.yaml
          outputs:
            - name: extra-values

      - task: deploy
        file: secrets.git/ci/shared/task-helm-upgrade.yaml
        input_mapping:
          helm-charts.git: juno.git
          extra-values.git: extra-values

        params:
          HELM_MAJOR_VERSION: '3'
          CHART_PATH: ci/helm-charts
          RELEASE: juno-v2
          NAMESPACE: juno
          REGION: qa-de-1
          CONTEXT: s-qa-de-1
          VALUES: local:globals s-local:juno extra:values.yaml
          KUBELOGON_USER: ((unified-kubernetes-auth/default.username))
          KUBELOGON_PASSWORD: ((unified-kubernetes-auth/default.password))
          VAULT_ROLE_ID:      ((auth.role_id))
          VAULT_SECRET_ID:    ((auth.secret_id))
          

    ensure:
      put: qa-de-1.release          

  - name: e2e-s-qa-de-1
    serial: true
    plan:
      - get: juno.git
        trigger: true
        passed: ["deploy-to-s-qa-de-1"]

      - task: cypress
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud/cypress-client
              tag: "latest"
          inputs:
            - name: juno.git
              path: /app/juno
          params:
            CYPRESS_API_URL: "https://director.cypress.qa-de-1.cloud.sap"
            CYPRESS_BROWSER: chrome

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd /app/juno/e2e
                CI_BUID_ID="$(date) - CI - dashboard-qa-tests - $CYPRESS_BROWSER $BROWSER_VERSION" && \
                echo $CI_BUID_ID && \
                CYPRESS_BASE_URL=https://juno.qa-de-1.cloud.sap cy2 run --record --key 'juno' --parallel --ci-build-id "$CI_BUID_ID" --browser $CYPRESS_BROWSER --spec "cypress/integration/dashboard/*" && \
                CI_BUID_ID="$(date) - CI - cdn-qa-tests - $CYPRESS_BROWSER $BROWSER_VERSION" && \
                echo $CI_BUID_ID && \
                CYPRESS_BASE_URL=https://cdn.juno.qa-de-1.cloud.sap cy2 run --record --key 'juno' --parallel --ci-build-id "$CI_BUID_ID" --browser $CYPRESS_BROWSER --spec "cypress/integration/cdn/*" && \
                CI_BUID_ID="$(date) - CI - assets-qa-tests - $CYPRESS_BROWSER $BROWSER_VERSION" && \
                echo $CI_BUID_ID && \
                CYPRESS_BASE_URL=https://assets.juno.qa-de-1.cloud.sap cy2 run --record --key 'juno' --parallel --ci-build-id "$CI_BUID_ID" --browser $CYPRESS_BROWSER --spec "cypress/integration/assets-server/*" && \
                CI_BUID_ID="$(date) - CI - ui-components-qa-tests - $CYPRESS_BROWSER $BROWSER_VERSION" && \
                echo $CI_BUID_ID && \
                CYPRESS_BASE_URL=https://ui.juno.qa-de-1.cloud.sap cy2 run --record --key 'juno' --parallel --ci-build-id "$CI_BUID_ID" --browser $CYPRESS_BROWSER --spec "cypress/integration/ui-storybook/*" && \
                CI_BUID_ID="$(date) - CI - exampleapp-components-qa-tests - $CYPRESS_BROWSER $BROWSER_VERSION" && \
                echo $CI_BUID_ID && \
                CYPRESS_BASE_URL=https://exampleapp.juno.qa-de-1.cloud.sap cy2 run --record --key 'juno' --parallel --ci-build-id "$CI_BUID_ID" --browser $CYPRESS_BROWSER --spec "cypress/integration/exampleapp/*"


  <%# DEPLOY ASSETS SERVER%>
  - name: deploy-to-s-eu-nl-1
    serial: true
    plan:
      - in_parallel:
          - get: assets-server.version
            passed: ["deploy-to-s-qa-de-1"]
          - get: ui-storybook.version
            passed: ["deploy-to-s-qa-de-1"]            
          - get: hosting.version
            passed: ["deploy-to-s-qa-de-1"]            
          - get: juno.git
            passed: ["e2e-s-qa-de-1"]
            trigger: false
          - get: secrets.git
            params:
              depth: 100 

      - task: generate-additional-values.yaml
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: 
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/busybox
              tag: "latest"
          inputs: 
            - name: assets-server.version 
            - name: ui-storybook.version
            - name: hosting.version
          run:
            path: /bin/sh
            args:
              - -c
              - |
                echo "build json with tags for every image"
                printf "\
                global: \n
                  assets_server_image_tag: \"$(cat assets-server.version/version)\"\n\
                  ui_storybook_image_tag: \"$(cat ui-storybook.version/version)\"\n\
                  hosting_image_tag: \"$(cat hosting.version/version)\"\n\
                " > ./extra-values/values.yaml

                cat ./extra-values/values.yaml
          outputs:
            - name: extra-values

      - task: deploy
        file: secrets.git/ci/shared/task-helm-upgrade.yaml
        input_mapping:
          helm-charts.git: juno.git
          extra-values.git: extra-values

        params:
          HELM_MAJOR_VERSION: '3'
          CHART_PATH: ci/helm-charts
          RELEASE: juno-v2
          NAMESPACE: juno
          REGION: eu-nl-1
          CONTEXT: s-eu-nl-1
          VALUES: local:globals s-local:juno extra:values.yaml
          KUBELOGON_USER: ((unified-kubernetes-auth/default.username))
          KUBELOGON_PASSWORD: ((unified-kubernetes-auth/default.password))
          VAULT_ROLE_ID:      ((auth.role_id))
          VAULT_SECRET_ID:    ((auth.secret_id))

    ensure:
      put: eu-nl-1.release          

  - name: e2e-s-eu-nl-1
    serial: true
    plan:
      - get: juno.git
        trigger: true
        passed: ["deploy-to-s-eu-nl-1"]

      - task: cypress
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud/cypress-client
              tag: "latest"
          inputs:
            - name: juno.git
              path: /app/juno
          params:
            CYPRESS_API_URL: "https://director.cypress.qa-de-1.cloud.sap"
            CYPRESS_BROWSER: chrome

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd /app/juno/e2e
                CI_BUID_ID="$(date) - CI - dashboard-qa-tests - $CYPRESS_BROWSER $BROWSER_VERSION" && \
                echo $CI_BUID_ID && \
                CYPRESS_BASE_URL=https://juno.eu-nl-1.cloud.sap cy2 run --record --key 'juno' --parallel --ci-build-id "$CI_BUID_ID" --browser $CYPRESS_BROWSER --spec "cypress/integration/dashboard/*" && \
                CI_BUID_ID="$(date) - CI - cdn-qa-tests - $CYPRESS_BROWSER $BROWSER_VERSION" && \
                echo $CI_BUID_ID && \
                CYPRESS_BASE_URL=https://cdn.juno.eu-nl-1.cloud.sap cy2 run --record --key 'juno' --parallel --ci-build-id "$CI_BUID_ID" --browser $CYPRESS_BROWSER --spec "cypress/integration/cdn/*" && \
                CI_BUID_ID="$(date) - CI - assets-qa-tests - $CYPRESS_BROWSER $BROWSER_VERSION" && \
                echo $CI_BUID_ID && \
                CYPRESS_BASE_URL=https://assets.juno.eu-nl-1.cloud.sap cy2 run --record --key 'juno' --parallel --ci-build-id "$CI_BUID_ID" --browser $CYPRESS_BROWSER --spec "cypress/integration/assets-server/*" && \
                CI_BUID_ID="$(date) - CI - ui-components-qa-tests - $CYPRESS_BROWSER $BROWSER_VERSION" && \
                echo $CI_BUID_ID && \
                CYPRESS_BASE_URL=https://ui.juno.eu-nl-1.cloud.sap cy2 run --record --key 'juno' --parallel --ci-build-id "$CI_BUID_ID" --browser $CYPRESS_BROWSER --spec "cypress/integration/ui-storybook/*" && \
                CI_BUID_ID="$(date) - CI - exampleapp-components-qa-tests - $CYPRESS_BROWSER $BROWSER_VERSION" && \
                echo $CI_BUID_ID && \
                CYPRESS_BASE_URL=https://exampleapp.juno.eu-nl-1.cloud.sap cy2 run --record --key 'juno' --parallel --ci-build-id "$CI_BUID_ID" --browser $CYPRESS_BROWSER --spec "cypress/integration/exampleapp/*"



  <%# DEPLOY GREENHOUSE %>
  - name: deploy-to-greenhouse-qa
    serial: true
    plan:
      - in_parallel:      
          - get: hosting.version
            passed: ["build-hosting"]  
            trigger: true          
          - get: juno.git
            trigger: false
          - get: secrets.git
            params:
              depth: 100 
          - get: greenhouse.git
            trigger: true

      - task: deploy
        file:  greenhouse.git/ci/tasks/helm-upgrade.yaml
        input_mapping:
          app.version: hosting.version
          helm-charts.git: juno.git

        params:
          HELM_MAJOR_VERSION: '3'
          CHART_PATH: ci/greenhouse-helm-charts
          RELEASE: greenhouse-ui
          NAMESPACE: greenhouse
          # greenhouse-ui is a sub-chart, so we need to use the name as prefix
          TAG_VARIABLE: greenhouse-ui.hosting_image_tag
          REGION: eu-nl-1
          CONTEXT: greenhouse-qa
          VALUES: local:globals
          VAULT_ROLE_ID:      ((auth.role_id))
          VAULT_SECRET_ID:    ((auth.secret_id))
          KUBELOGON_TOKEN: ((greenhouse-qa/serviceaccount.token))