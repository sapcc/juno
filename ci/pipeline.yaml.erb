# prettier-ignore
<%
  # supported asset types
  ASSET_TYPES = { 
    "juno-assets": ["apps","libs"],
    "juno-3rd-party": ["apps"],
  }
  ASSETS = {
    "auth":                 { type: "app", path: "apps/auth" },
    "assets-overview":      { type: "app", path: "apps/assets-overview"},
    "user-activity":        { type: "app", path: "apps/user-activity"},
    "volta":                { type: "app", path: "apps/volta"},
    "whois":                { type: "app", path: "apps/whois"},
    "widget-loader":        { type: "app", path: "apps/widget-loader"},
    "dashboard":            { type: "app", path: "apps/dashboard"},
    "doop":                 { type: "app", path: "apps/doop"},
    "supernova":            { type: "app", path: "apps/supernova"},
    "exampleapp":           { type: "app", path: "apps/exampleapp"},
    "greenhouse":           { type: "app", path: "apps/greenhouse" },
    "heureka":              { type: "app", path: "apps/heureka"},
    "juno-ui-components":   { type: "lib", path: "libs/juno-ui-components"},
    "messages-provider":    { type: "lib", path: "libs/messages-provider"},
    "oauth":                { type: "lib", path: "libs/oauth"},
    "policy-engine":        { type: "lib", path: "libs/policy-engine"},
    "communicator":         { type: "lib", path: "libs/communicator"},
    "url-state-provider":   { type: "lib", path: "libs/url-state-provider"},
    "url-state-router":     { type: "lib", path: "libs/url-state-router"},
}
%>

resources:
  - name: base.image
    type: docker-image
    icon: docker
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v3-base

  - name: swift.image
    type: docker-image
    icon: docker
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v3-swift

  - name: assets-server.image
    type: docker-image
    icon: docker
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v3-assets-server

  - name: juno.git
    type: git
    icon: github
    source:
      uri: https://github.com/sapcc/juno.git
      branch: pipelineV3
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))      

  - name: juno-swift.git
    type: git
    icon: github
    source:
      uri: https://github.com/sapcc/juno.git
      branch: pipelineV3
      username: sapcc-bot
      paths: ["ci/Dockerfile.swift"]
      password: ((github-access-token/sapcc-bot))   

  - name: ui-storybook.git
    type: git
    icon: github
    source:
      uri: https://github.com/sapcc/juno.git
      branch: pipelineV3
      paths: ["libs/juno-ui-components","package.json","ci/Dockerfile.ui.storybook","e2e"]
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))
  
  - name: ui-storybook.version
    type: time-version-resource
    icon: lock
    check_every: 525600h
    source: { key: juno-ui-storybook-version } # disambiguate from other time-version resources

  - name: ui-storybook.image
    type: docker-image
    icon: docker
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v3-ui-storybook

  - name: hosting.git
    type: git
    icon: github
    source:
      uri: https://github.com/sapcc/juno.git
      branch: pipelineV3
      paths: ["ci/Dockerfile.hosting","ci/pipeline.yaml.erb"]
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))
  
  - name: hosting.version
    type: time-version-resource
    icon: lock
    check_every: 525600h
    source: { key: juno-hosting-version } # disambiguate from other time-version resources

  - name: hosting.image
    type: docker-image
    icon: docker
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v3-hosting

  <%# ASSETS SOURCE GIT %>
  <% ASSETS.each do |name,details| %>
  - name: <%=details[:type]%>-<%= name %>.git
    type: git
    icon: github
    source:
      uri: https://github.com/sapcc/juno.git
      branch: pipelineV3
      paths: ["<%=details[:path]%>","package.json","e2e", ".yarn", "ci/scripts" ]
      # Note: add this if you need to test changes in scripts -> you need to add "scripts"
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))
  
  - name: <%= details[:type] %>-<%= name %>.version
    type: time-version-resource
    icon: lock
    check_every: 525600h
    source: { key: "<%= details[:type] %>-<%= name %>" } # disambiguate from other time-version resources

  <% end %>

  - name: assets-server.version
    type: time-version-resource
    icon: lock
    check_every: 525600h
    source: { key: "juno-assets-server-version" } # disambiguate from other time-version resources

resource_types:
  - name: git-proxy
    type: registry-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud/concourse-git-resource-proxy
      tag: latest

  - name: time-version-resource
    type: docker-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud/concourse-time-version-resource
      tag: v2

groups: 
  - name: assets 
    jobs:
      <% ASSETS.each do |name,details| %>
      - build-<%= details[:type] %>-<%= name %>
      <% end %>
      - build-assets-server-image
      - deploy-assets-server-to-s-qa-de-1
      - e2e-tests-assets-server-s-qa-de-1
      <%["eu-nl-1","ap-au-1","la-br-1","na-us-1"].each do |region|%>
      - deploy-assets-server-to-<%= region %>
      <% end %>  

  - name: base
    jobs:
      - readme
      - build-base-image
      - build-swift-image  
  - name: storybook
    jobs:
      - build-ui-storybook-image
      - deploy-storybook-to-s-qa-de-1
      - e2e-tests-storybook-s-qa-de-1
      - deploy-storybook-to-s-eu-nl-1   
  - name: hosting 
    jobs:
      - build-hosting-image
      - deploy-hosting-to-s-qa-de-1
      - e2e-tests-hosting-s-qa-de-1
      - deploy-hosting-to-s-eu-nl-1     
  
jobs:
  - name: readme
    serial: true
    plan:
      - task: describe-this-pipeline
        config:
          platform: "linux"
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/alpine
              tag: latest
          run:
            path: /bin/echo
            args:
              - -e
              - '\tThis pipeline is defined at: https://github.com/sapcc/juno/ci/\n\n'
              - '\tManage Juno images: https://keppel.eu-de-1.cloud.sap/ccloud/juno\n'

  # =============================================================
  # BUILD BASE IMAGES
  - name: build-base-image
    public: true
    plan:
      - get: juno.git
        trigger: true

      - put: base.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: juno.git
          dockerfile: juno.git/ci/Dockerfile.base

  - name: build-swift-image
    public: true
    plan:
      - get: juno-swift.git
        trigger: true

      - put: swift.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: juno-swift.git
          dockerfile: juno-swift.git/ci/Dockerfile.swift

  # ============================================================= 
  # BUILD ASSET SERVER IMAGE

  <% ASSETS.each do |name,details| %>
  - name: build-<%= details[:type] %>-<%= name %>
    public: true
    plan:
      - get: <%= details[:type] %>-<%= name %>.git
        trigger: true
      - get: base.image
      - get: swift.image
      - put: <%= details[:type] %>-<%= name %>.version

      - task: build
        image: base.image
        input_mapping: 
          latest: <%= details[:type] %>-<%= name %>.git
        config:
          inputs:
            - name: latest
          outputs:
            - name: build_result
          platform: linux
          run:
            path: /bin/sh
            # NOTE use -cx for debugging, than you can see the commands that where tirggered in the log
            args:
              - -c
              - |
                set -e 
                ls -la
                echo "sync all node_modules from /juno/ to ./latest/"
                rsync -am --include='*/' --include='node_modules/***' --exclude='*' /juno/ ./latest
                cd ./latest
                echo "update node modules -> npm install --silent"
                npm install --silent
                echo ""
                ./ci/scripts/build_asset.sh --asset-path <%= details[:path] %> --asset-name <%= name %> --output-path ../build_result
      - task: upload
        image: swift.image
        params: 
          OS_USERNAME: ((swift-username))
          OS_PASSWORD: ((keystone-user-password/concourse-eu-de-1))
          OS_AUTH_URL: ((swift-auth-url))
          OS_USER_DOMAIN_NAME: ((swift-user-domain-name))
          OS_PROJECT_DOMAIN_NAME: ((swift-project-domain-name))
          OS_PROJECT_NAME: ((swift-project-name))
        input_mapping: 
          juno: <%=details[:type]%>-<%= name %>.git
        config:
          inputs:
            - name: build_result
            - name: juno
          platform: linux
          run:
            path: /bin/sh
            args:
              - -cx
              - |
                set -e 
                cd ./juno
                ./ci/scripts/asset_storage.sh --asset-name <%= name %> --container juno-assets --asset-path <%= details[:path] %> --action upload --root-path ../build_result
  <% end %> 

  <% 
  # this step combines all assets that where build and uploaded before to swift
  # for that we use nginx image and copy all assets (that where build in the step before) into /usr/share/nginx/html/
  # this image will be deployed as asset server 

  # Important! 
  # If the asset-server.image was not build before 
  # 1) comment the parts in the dockerfile where the image is needed to copy old stuff over
  # 2) you need first build the libs otherwise the build importmap step will fail because 
  #    it will not find the libs
  # 3) if the libs are build and uploaded to swift you can add the apps
  # 4) when the apps are build without problems you can uncomment the parts in 
  #    the dockerfile to store the old versions 
  %>
  - name: build-assets-server-image
    public: true
    plan:
      - get: swift.image
      - get: juno.git        
        passed: [build-base-image]
      <% ASSETS.each do |name, details|%>
      - get: <%= details[:type] %>-<%= name %>.version
        trigger: false
        passed: ["build-<%= details[:type] %>-<%= name %>"]  
      <% end %>
      - put: assets-server.version
      <%# COPY ALL BUILDS TO dist %>
      - task: combine-builds
        image: swift.image
        params: 
          OS_USERNAME: ((swift-username))
          OS_PASSWORD: ((keystone-user-password/concourse-eu-de-1))
          OS_AUTH_URL: ((swift-auth-url))
          OS_USER_DOMAIN_NAME: ((swift-user-domain-name))
          OS_PROJECT_DOMAIN_NAME: ((swift-project-domain-name))
          OS_PROJECT_NAME: ((swift-project-name))
        config:
          platform: linux
          inputs:
            - name: juno.git
          outputs:
            - name: dist
          run:
            path: /bin/bash
            # NOTE use -cx for debugging, than you can see the commands that where tirggered in the log
            args:
              - -c
              - |
                # exit on error
                set -e

                mkdir -p ./temp/juno-assets
                mkdir -p ./temp/juno-3rd-party
                DIST_PATH=$(pwd)/dist
                cd ./juno.git

                # 1.1) download our own assets
                <% ASSETS.each do |name, details|%>
                  ./ci/scripts/asset_storage.sh --container juno-assets --asset-name <%= name %> --asset-path <%= details[:path] %> --action download --root-path ../temp/juno-assets
                  # ls -all ../temp/juno-assets/<%=details[:type]%>s/<%= name %>/
                <% end %>
                # 1.2) download and check for name collission in juno-3rd-party assets
                <% ASSET_TYPES[:"juno-3rd-party"].each do |asset_type|%>
                    # download 3rd party assets
                    ./ci/scripts/asset_storage.sh --container juno-3rd-party --asset-type <%= asset_type %> --action download --root-path ../temp/juno-3rd-party                  
                    ./ci/scripts/check_3rd_party_name_collisons.sh --juno-assets-path ../temp/juno-assets --third-party-assets-path ../temp/juno-3rd-party --asset-type <%= asset_type %>
                <% end %>
                # 2) compose everthing together that we can use it in the asset-server image build
                <% ASSET_TYPES.each do |name,asset_types|%>
                  <% asset_types.each do |asset_type|%>
                    # check and compose everthing in the dist output folder that
                    # we can combine everything in the asset-server buid step
                    if [[ "<%= name %>" == "juno-3rd-party" ]]; then
                      # if the integrity check for 3rd party fails there will be no error
                      # because we do not want a blocked pipeline
                      # but an error log is uploaded to the 3rd party apps/libs folder
                      # if an error_log was found the new version is not deployed
                      ./ci/scripts/compose_assets.sh --error-on-exit 0 --asset-type <%= asset_type %> --source-path ../temp  --dist-path $DIST_PATH --kind <%= name %>
                    else
                      ./ci/scripts/compose_assets.sh --error-on-exit 1 --asset-type <%= asset_type %> --source-path ../temp  --dist-path $DIST_PATH --kind <%= name %>
                    fi
                  <% end %>
                <% end %>
                echo ""
                echo "### APPS ###"
                ls -all $DIST_PATH/apps/
                echo "### LIBS ###"
                ls -all $DIST_PATH/libs/
                # upload build logs
                ./ci/scripts/asset_storage.sh --container juno-3rd-party --asset-type apps --action upload --root-path ../temp/juno-3rd-party &> /dev/null
                ./ci/scripts/asset_storage.sh --container juno-assets --asset-type apps --action upload --root-path ../temp/juno-assets &> /dev/null
                #exit 1

      # to serve our js, css and stattic assets this step will add all the created data 
      # in dist/ to the nginx image in /usr/share/nginx/html
      - put: assets-server.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          # root for docker build, its using the output dir from the step before
          build: dist
          dockerfile: juno.git/ci/Dockerfile.assets.server
          tag: assets-server.version/version
          build_args: 
            NPM_PROVIDER: "jspm"
        get_params:
          skip_download: true

  # =============================================================
  # EXTRA IMAGES


  ########### STORYBOOK ############
  # BUILD STORYBOOK IMAGE
  - name: build-ui-storybook-image
    serial: true
    plan:
      - in_parallel:
          - get: ui-storybook.git
            trigger: true
          - put: ui-storybook.version
      - in_parallel:
          - put: ui-storybook.image
            params:
              tag_as_latest: true
              # cache: true
              cache_tag: "latest"
              build: ui-storybook.git
              build_args: 
                KEPPEL_HOSTNAME: keppel.eu-de-1.cloud.sap
              dockerfile: ui-storybook.git/ci/Dockerfile.ui.storybook
              tag: ui-storybook.version/version

  # DEPLOY STORYBOOK TO QA 
  - name: deploy-storybook-to-s-qa-de-1
    serial: true
    plan:
      - in_parallel:
          - get: ui-storybook.version
            trigger: true
            passed: [build-ui-storybook-image]

  # RUN CYPRESS TESTS FOR STORYBOOK IN QA 
  - name: e2e-tests-storybook-s-qa-de-1
    serial: true
    plan:
      - in_parallel:
          - get: ui-storybook.version
            trigger: true
            passed: [deploy-storybook-to-s-qa-de-1]            

  # DEPLOY STORYBOOK TO PROD
  - name: deploy-storybook-to-s-eu-nl-1
    serial: true
    plan:
      - in_parallel:
          - get: ui-storybook.version
            trigger: false
            passed: [e2e-tests-storybook-s-qa-de-1]

  ############ ASSETS SERVER  #########
  # DEPLOY ASSETS SERVER TO QA 
  - name: deploy-assets-server-to-s-qa-de-1
    serial: true
    plan:
      - in_parallel:
          - get: assets-server.version
            trigger: true
            passed: [build-assets-server-image]

  # RUN CYPRESS TESTS FOR ASSETS SERVER IN QA 
  - name: e2e-tests-assets-server-s-qa-de-1
    serial: true
    plan:
      - in_parallel:
          - get: assets-server.version
            trigger: true
            passed: [deploy-assets-server-to-s-qa-de-1]            

  # DEPLOY ASSETS SERVER TO PROD (HA)
  <%["eu-nl-1","ap-au-1","la-br-1","na-us-1"].each do |region|%>
  - name: deploy-assets-server-to-<%= region %>
    serial: true
    plan:
      - in_parallel:
          - get: assets-server.version
            trigger: false
            passed: [e2e-tests-assets-server-s-qa-de-1]    
  <% end %>                


  ########### HOSTING ###########
  # BUILD HOSTING IMAGE
  - name: build-hosting-image
    serial: true
    plan:
      - in_parallel:
          - get: hosting.git
            trigger: true
          - put: hosting.version
      - in_parallel:
          - put: hosting.image
            params:
              tag_as_latest: true
              # cache: true
              cache_tag: "latest"
              build: hosting.git
              build_args: 
                KEPPEL_HOSTNAME: keppel.eu-de-1.cloud.sap
              dockerfile: hosting.git/ci/Dockerfile.hosting
              tag: hosting.version/version

  # DEPLOY HOSTING TO QA 
  - name: deploy-hosting-to-s-qa-de-1
    serial: true
    plan:
      - in_parallel:
          - get: hosting.version
            trigger: true
            passed: [build-hosting-image]

  # RUN CYPRESS TESTS FOR HOSTING IN QA 
  - name: e2e-tests-hosting-s-qa-de-1
    serial: true
    plan:
      - in_parallel:
          - get: hosting.version
            trigger: true
            passed: [deploy-hosting-to-s-qa-de-1]            

  # DEPLOY HOSTING TO PROD
  - name: deploy-hosting-to-s-eu-nl-1
    serial: true
    plan:
      - in_parallel:
          - get: hosting.version
            trigger: false
            passed: [e2e-tests-hosting-s-qa-de-1]  