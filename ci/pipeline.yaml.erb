# prettier-ignore
<%
  APPS = ["auth","designate","widget-loader","whois","volta"]
  LIBS = ["juno-ui-components", "communicator", "url-state-provider", "url-state-router"] 
%>

resources:
  - name: qa-de-1.release
    type: release
    check_every: 525600h # basically never (check is a no-op anyway)
    source: { region: "qa-de-1" }

  - name: eu-nl-1.release
    type: release
    check_every: 525600h # basically never (check is a no-op anyway)
    source: { region: "eu-nl-1" }


  - name: test-image-source.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["ci/Dockerfile.test", "ci/helm-charts"]
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))

  - name: lib-juno-ui-components.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["libs/juno-ui-components","package.json","ci/Dockerfile.ui-components","e2e", "ci/helm-charts"]
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))

  - name: app-dashboard.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["apps/dashboard","package.json","libs","ci/Dockerfile.dashboard","e2e", "ci/helm-charts"]
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))

  - name: api-mercury.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["apis/mercury","package.json","ci/Dockerfile.mercury","e2e",".yarn", "ci/helm-charts"]
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))      
 
  <% APPS.each do |app| %>
  - name: app-<%= app %>.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["apps/<%= app %>","package.json","libs","ci/Dockerfile.app","e2e", ".yarn","ci/pipeline.yaml"]
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))      

  - name: juno-<%= app %>.image
    type: docker-image
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-<%= app %>    
  <% end %>

  - name: repo.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))     

  - name: ci.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: main
      paths: ["ci","package.json",".yarn"]
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))     

  - name: secrets.git
    type: git-proxy
    webhook_token: lfkhslkfhs
    check_every: 6h
    source:
      uri: git@github.wdf.sap.corp:cc/secrets.git
      branch: "master"
      private_key: ((github-private-key/cc-secrets))

  - name: dashboard.version
    type: time-version-resource
    check_every: 525600h

  - name: mercury.version
    type: time-version-resource
    check_every: 525600h   

  - name: juno-ui-components.version
    type: time-version-resource
    check_every: 525600h    

  - name: cdn.version
    type: time-version-resource
    check_every: 525600h    

  - name: juno-dashboard.image
    type: docker-image
    check_every: 24h
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-dashboard  

  - name: juno-mercury.image
    type: docker-image
    check_every: 24h
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-mercury

  - name: juno-ui-components.image
    type: docker-image
    check_every: 24h
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-ui-components

  - name: juno-cdn.image
    type: docker-image
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-cdn     

  - name: juno-unit-test.image
    type: docker-image
    check_every: 24h
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-unit-test

resource_types:
  - name: git-proxy
    type: registry-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/sapcc/concourse-git-resource-proxy

  - name: time-version-resource
    type: docker-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud/concourse-time-version-resource
      tag: v2

  - name: release
    type: docker-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud/concourse-release-resource
      tag: v1.1

jobs:
  # for info only
  - name: readme
    serial: true
    plan:
      - task: describe-this-pipeline
        config:
          platform: "linux"
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/alpine
              tag: latest
          run:
            path: /bin/echo
            args:
              - -e
              - '\tThis pipeline is defined at: https://github.com/sapcc/juno/ci/\n\n'
              - '\tManage Juno images: https://keppel.eu-de-1.cloud.sap/ccloud/juno-dashboard\n'

  # build the test image if Dockerfile.test changes
  - name: build-unit-test-image
    public: true
    plan:
      - get: test-image-source.git
        trigger: true

      - put: juno-unit-test.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: test-image-source.git
          build_args: 
            KEPPEL_HOSTNAME: keppel.eu-de-1.cloud.sap
          dockerfile: test-image-source.git/ci/Dockerfile.test

  # name: unit tests for juno-ui-components
  - name: unit-test-juno-ui-components
    public: true
    plan:
      - get: juno-unit-test.image
        passed: ["build-unit-test-image"]
        trigger: true
      - get: lib-juno-ui-components.git
        trigger: true

      - task: unit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud/juno-unit-test
              tag: "latest"
          inputs:
            - name: lib-juno-ui-components.git
              path: /app/juno

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd /app/juno
                yarn install 1>/dev/null
                yarn workspaces focus juno-ui-components 1>/dev/null
                CI=true yarn workspace juno-ui-components test 1>/dev/null
       
  # build juno-ui-components image and push it to keppel
  - name: build-juno-ui-components
    serial: true
    plan:
      - in_parallel:
          - get: lib-juno-ui-components.git
            passed: ["unit-test-juno-ui-components"]
            trigger: true
          - put: juno-ui-components.version
      - in_parallel:
          - put: juno-ui-components.image
            params:
              tag_as_latest: true
              # cache: true
              cache_tag: "latest"
              build: lib-juno-ui-components.git
              build_args: 
                KEPPEL_HOSTNAME: keppel.eu-de-1.cloud.sap
              dockerfile: lib-juno-ui-components.git/ci/Dockerfile.ui-components
              tag: juno-ui-components.version/version
            # get_params:
            #   skip_download: true

  # run unit tests for dashboard sources
  - name: unit-test-dashboard
    public: true
    plan:
      - get: juno-unit-test.image
        passed: ["build-unit-test-image"]
        trigger: true
      - get: lib-juno-ui-components.git
        passed: ["unit-test-juno-ui-components"]    
      - get: app-dashboard.git
        trigger: true

      - task: unit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud/juno-unit-test
              tag: "latest"
          inputs:
            - name: app-dashboard.git
              path: /app/juno

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd /app/juno
                yarn install 1>/dev/null
                yarn workspaces focus juno-ui-components dashboard 1>/dev/null
                yarn workspace juno-ui-components build 1>/dev/null
                CI=true yarn workspace dashboard test 1>/dev/null

  # build dashboard image and push it to keppel
  - name: build-dashboard
    serial: true
    plan:
      - in_parallel:
          - get: app-dashboard.git
            passed: ["unit-test-dashboard"]

            trigger: true
          - put: dashboard.version
      - in_parallel:
          - put: juno-dashboard.image
            params:
              tag_as_latest: true
              cache: true
              cache_tag: "latest"
              build: app-dashboard.git
              build_args: 
                KEPPEL_HOSTNAME: keppel.eu-de-1.cloud.sap
                LIBS: <%= LIBS.join(" ") %>
              dockerfile: app-dashboard.git/ci/Dockerfile.dashboard
              tag: dashboard.version/version
            get_params:
              skip_download: true

  # ******************* MERCURY ******************************
  # run unit tests for dashboard sources
  - name: unit-test-mercury
    public: true
    plan:
      - get: juno-unit-test.image
        passed: ["build-unit-test-image"]
        trigger: true
      - get: api-mercury.git
        trigger: true

      - task: unit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud/juno-unit-test
              tag: "latest"
          inputs:
            - name: api-mercury.git
              path: /app/juno

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd /app/juno
                yarn install 1>/dev/null
                yarn workspaces focus mercury 1>/dev/null
                CI=true yarn workspace mercury test-prod 1>/dev/null

  # build dashboard image and push it to keppel
  - name: build-mercury
    serial: true
    plan:
      - in_parallel:
          - get: api-mercury.git
            passed: ["unit-test-mercury"]
            trigger: true
          - put: mercury.version
      - in_parallel:
          - put: juno-mercury.image
            params:
              tag_as_latest: true
              cache: true
              cache_tag: "latest"
              build: api-mercury.git
              build_args: 
                KEPPEL_HOSTNAME: keppel.eu-de-1.cloud.sap
                LIBS: <%= LIBS.join(" ") %>
              dockerfile: api-mercury.git/ci/Dockerfile.mercury
              tag: mercury.version/version
            get_params:
              skip_download: true
  #*********************** END MERCURY ******************************

  # run unit tests for each app in /apps
  <% APPS.each do |app| %>
  - name: unit-test-<%= app %>
    public: true
    plan:
      - get: juno-unit-test.image
        passed: ["build-unit-test-image"]
        trigger: true
      - get: lib-juno-ui-components.git
        passed: ["unit-test-juno-ui-components"]    
      - get: app-<%= app %>.git
        trigger: true

      - task: unit
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud/juno-unit-test
              tag: "latest"
          inputs:
            - name: app-<%= app %>.git
              path: /app/juno

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd /app/juno
                yarn install 1>/dev/null
                yarn workspaces focus <%= LIBS.join(" ") %> <%= app %> 1>/dev/null
                yarn build 1>/dev/null
                CI=true yarn workspace <%= app %> test 1>/dev/null

  # build image for each app in /apps
  # we tag this images as latest. App images only serve as a buffer 
  # to be used in the next step. After that, they are no longer used. 
  - name: build-<%= app %>
    public: true
    plan:
      - get: app-<%= app %>.git
        passed: ["unit-test-<%= app %>"]
        trigger: true

      - put: juno-<%= app %>.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: app-<%= app %>.git
          build_args: 
            APP_NAME: "<%= app %>" 
            LIBS: <%= LIBS.join(" ") %>
            KEPPEL_HOSTNAME: keppel.eu-de-1.cloud.sap
          dockerfile: app-<%= app %>.git/ci/Dockerfile.app

  <% end %>

  # this step combines all app images
  # for that we use nginx image and copy all builded apps (in the step before)
  # into /usr/share/nginx/html/
  # this image will be deployed as CDN server
  - name: combine-apps
    public: true
    plan:
      <% APPS.each do |app| %>
      - get: app-<%= app %>.git
        passed: ["build-<%= app %>"]
        trigger: true
      <% end %>  
      - get: ci.git  
      - put: cdn.version
      <% APPS.each do |app| %>
      - in_parallel:
        - task: copy-build-of-<%= app %>
          config:
            platform: linux
            image_resource:
              type: registry-image
              source: 
                repository: keppel.eu-de-1.cloud.sap/ccloud/juno-<%= app %>
                tag: "latest"
            run:
              path: /bin/sh
              args:
                - -c
                - |         
                  VERSION=$(cat /app/package.json | grep version | sed 's/^.*"version": "\([^"]*\).*$/\1/' | sed 's/\./_/g')
                  cp -r /app/build ./<%= app %>-output/$VERSION
                  cp -r /app/build ./<%= app %>-output/latest
                   
            outputs:
              - name: <%= app %>-output
      <% end %>    

      - task: combine-builds
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: 
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/busybox
              tag: "latest"
          inputs: 
            <% APPS.each do |app| %>
            - name: <%= app %>-output 
            <% end %>    
          run:
            path: /bin/sh
            args:
              - -c
              - |
                <% APPS.each do |app| %>
                cp -r ./<%= app %>-output  ./build/<%= app %>;
                <% end %>
                echo $(date) > ./updated_at

          outputs:
            - name: build

      - put: juno-cdn.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: build
          build_args: 
            KEPPEL_HOSTNAME: keppel.eu-de-1.cloud.sap
          dockerfile: ci.git/ci/Dockerfile.cdn
          tag: cdn.version/version
        get_params:
          skip_download: true

  - name: deploy-to-s-qa-de-1
    serial: true
    plan:
      - in_parallel:
          - get: dashboard.version
            trigger: true
            passed: ["build-dashboard"]    
          - get: mercury.version
            trigger: true
            passed: ["build-mercury"]      
          - get: cdn.version
            trigger: true
            passed: ["combine-apps"]
          - get: juno-ui-components.version
            trigger: true
            passed: ["build-juno-ui-components"]
          - get: ci.git
          - get: secrets.git
            params:
              depth: 100 

      - task: generate-additional-tags-values.yaml
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: 
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/busybox
              tag: "latest"
          inputs: 
            - name: cdn.version 
            - name: juno-ui-components.version
            - name: mercury.version
          run:
            path: /bin/sh
            args:
              - -c
              - |
                printf "cdn: {image_tag: \"$(cat cdn.version/version)\"}\njuno_ui_components: {image_tag: \"$(cat juno-ui-components.version/version)\"}\nmercury: {image_tag: \"$(cat mercury.version/version)\"}" > ./extra-values/values.yaml
                cat ./extra-values/values.yaml
          outputs:
            - name: extra-values

      - task: deploy
        file: secrets.git/ci/shared/task-helm-upgrade.yaml
        input_mapping:
          # we deploy dashboard image with the last created version tag (ImagePullPolicy IfNotPresent)
          # cdn uses latest with ImagePullPolicy Always
          app.version: dashboard.version
          helm-charts.git: ci.git
          extra-values.git: extra-values

        params:
          HELM_MAJOR_VERSION: '3'
          CHART_PATH: ci/helm-charts
          RELEASE: juno
          NAMESPACE: juno
          REGION: qa-de-1
          CONTEXT: s-qa-de-1
          TAG_VARIABLE: dashboard.image_tag
          VALUES: local:globals s-local:juno extra:values.yaml
          KUBELOGON_USER: ((unified-kubernetes-auth/default.username))
          KUBELOGON_PASSWORD: ((unified-kubernetes-auth/default.password))
          VAULT_ROLE_ID:      ((auth.role_id))
          VAULT_SECRET_ID:    ((auth.secret_id))

    ensure:
      put: qa-de-1.release

  - name: e2e-s-qa-de-1
    serial: true
    plan:           
      - get: dashboard.version
        trigger: true
        passed: ["deploy-to-s-qa-de-1"]
      - get: cdn.version
        trigger: true  
        passed: ["deploy-to-s-qa-de-1"]
      - get: juno-ui-components.version
        trigger: true          
        passed: ["deploy-to-s-qa-de-1"]
      - get: mercury.version
        trigger: true          
        passed: ["deploy-to-s-qa-de-1"]        
      - get: repo.git

      - task: cypress
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud/cypress-client
              tag: "latest"
          inputs:
            - name: repo.git
              path: /app/juno
          params:
            CYPRESS_API_URL: "https://director.cypress.qa-de-1.cloud.sap"
            CYPRESS_BROWSER: chrome

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd /app/juno/e2e
                CI_BUID_ID="$(date) - CI - dashboard-tests - $CYPRESS_BROWSER $BROWSER_VERSION" && \
                echo $CI_BUID_ID && \
                CYPRESS_BASE_URL=https://juno.qa-de-1.cloud.sap cy2 run --record --key 'juno' --parallel --ci-build-id "$CI_BUID_ID" --browser $CYPRESS_BROWSER --spec "cypress/integration/dashboard/*" && \
                CI_BUID_ID="$(date) - CI - cdn-tests - $CYPRESS_BROWSER $BROWSER_VERSION" && \
                echo $CI_BUID_ID && \
                CYPRESS_BASE_URL=https://cdn.juno.qa-de-1.cloud.sap cy2 run --record --key 'juno' --parallel --ci-build-id "$CI_BUID_ID" --browser $CYPRESS_BROWSER --spec "cypress/integration/cdn/*" && \
                CI_BUID_ID="$(date) - CI - ui-components-tests - $CYPRESS_BROWSER $BROWSER_VERSION" && \
                echo $CI_BUID_ID && \
                CYPRESS_BASE_URL=https://ui.juno.qa-de-1.cloud.sap cy2 run --record --key 'juno' --parallel --ci-build-id "$CI_BUID_ID" --browser $CYPRESS_BROWSER --spec "cypress/integration/ui-components/*" && \
                CI_BUID_ID="$(date) - CI - mercury-components-tests - $CYPRESS_BROWSER $BROWSER_VERSION" && \
                echo $CI_BUID_ID && \
                CYPRESS_BASE_URL=https://ui.juno.qa-de-1.cloud.sap cy2 run --record --key 'juno' --parallel --ci-build-id "$CI_BUID_ID" --browser $CYPRESS_BROWSER --spec "cypress/integration/mercury/*"

  - name: deploy-to-s-eu-nl-1
    serial: true
    plan:
      - in_parallel:
          - get: dashboard.version
            passed: ["e2e-s-qa-de-1"]
          - get: cdn.version
            passed: ["e2e-s-qa-de-1"]
          - get: juno-ui-components.version
            passed: ["e2e-s-qa-de-1"]
          - get: mercury.version
            passed: ["e2e-s-qa-de-1"]
          - get: ci.git
          - get: secrets.git
            params:
              depth: 100

      - task: replicate-dashboard-image-to-target-region
        file: secrets.git/ci/shared/task-replicate-image.yaml
        input_mapping:
          app.version: dashboard.version
        params:
          REGION: eu-nl-1
          IMAGE: juno-dashboard

      - task: replicate-mercury-image-to-target-region
        file: secrets.git/ci/shared/task-replicate-image.yaml
        input_mapping:
          app.version: mercury.version
        params:
          REGION: eu-nl-1
          IMAGE: juno-mercury          

      - task: replicate-cdn-image-to-target-region
        file: secrets.git/ci/shared/task-replicate-image.yaml
        input_mapping:
          app.version: cdn.version
        params:
          REGION: eu-nl-1
          IMAGE: juno-cdn   

      - task: replicate-ui-compoents-image-to-target-region
        file: secrets.git/ci/shared/task-replicate-image.yaml
        input_mapping:
          app.version: juno-ui-components.version
        params:
          REGION: eu-nl-1
          IMAGE: juno-ui-components        

      - task: generate-extra-values.yaml
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: 
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/busybox
              tag: "latest"
          inputs: 
            - name: cdn.version 
            - name: juno-ui-components.version
            - name: mercury.version
          run:
            path: /bin/sh
            args:
              - -c
              - |
                printf "cdn: {image_tag: \"$(cat cdn.version/version)\"}\njuno_ui_components: {image_tag: \"$(cat juno-ui-components.version/version)\"}\nmercury: {image_tag: \"$(cat mercury.version/version)\"}" > ./extra-values/values.yaml
                cat ./extra-values/values.yaml
          outputs:
            - name: extra-values

      - task: deploy
        file: secrets.git/ci/shared/task-helm-upgrade.yaml
        input_mapping:
          # we deploy dashboard image with the last created version tag (ImagePullPolicy IfNotPresent)
          # cdn uses latest with ImagePullPolicy Always
          app.version: dashboard.version
          helm-charts.git: ci.git
          extra-values.git: extra-values

        params:
          HELM_MAJOR_VERSION: '3'
          CHART_PATH: ci/helm-charts
          RELEASE: juno
          NAMESPACE: juno
          REGION: eu-nl-1
          CONTEXT: s-eu-nl-1
          TAG_VARIABLE: dashboard.image_tag
          VALUES: local:globals s-local:juno extra:values.yaml
          KUBELOGON_USER: ((registry-user/keppel-ccloud.username))
          KUBELOGON_PASSWORD: ((registry-user/keppel-ccloud.password))          
         
    ensure:
      put: eu-nl-1.release


  - name: e2e-production
    serial: true
    plan:           
      - get: dashboard.version
        trigger: true
        passed: ["deploy-to-s-eu-nl-1"]
      - get: cdn.version
        trigger: true          
        passed: ["deploy-to-s-eu-nl-1"]  
      - get: juno-ui-components.version
        trigger: true          
        passed: ["deploy-to-s-eu-nl-1"]        
      - get: app-dashboard.git

      - task: cypress
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/cypress/included
              tag: "7.1.0"
          inputs:
            - name: app-dashboard.git
              path: /app/juno

          run:
            path: /bin/sh
            args:
              - -c
              - |
                cd /app/juno/e2e
                CYPRESS_BASE_URL=https://juno.global.cloud.sap cypress run --spec "cypress/integration/dashboard/*"
                CYPRESS_BASE_URL=https://cdn.juno.global.cloud.sap cypress run --spec "cypress/integration/cdn/*"
                CYPRESS_BASE_URL=https://ui.juno.global.cloud.sap cypress run --spec "cypress/integration/ui-components/*"
    

