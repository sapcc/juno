# prettier-ignore
<%
  ASSETS = {
    "requests": { type: "app", path: "apps/requests" },
    "dashboard": { type: "app", path: "apps/dashboard"},
    "widget-loader": { type: "app", path: "apps/widget-loader"},
    "whois": { type: "app", path: "apps/whois"},
    "volta": { type: "app", path: "apps/volta"},
    "heureka": { type: "app", path: "apps/heureka"},
    "maintenance": { type: "app", path: "apps/maintenance"},

    "juno-ui-components": { type: "lib", path: "libs/juno-ui-components"},
    "policy-engine": { type: "lib", path: "libs/policy-engine"},
    "oauth": { type: "lib", path: "libs/oauth"},
    "communicator": { type: "lib", path: "libs/communicator"},
    "url-state-provider": { type: "lib", path: "libs/url-state-provider"},
    "url-state-router": { type: "lib", path: "libs/url-state-router"},
  }
%>

resources:
  - name: qa-de-1.release
    type: release
    check_every: never 
    source: { region: qa-de-1, tenso_password: ((keystone-user-password/tenso-prod)) }
    expose_build_created_by: true

  - name: secrets.git
    type: git-proxy
    webhook_token: lfkhslkfhs
    check_every: 6h
    source:
      uri: git@github.wdf.sap.corp:cc/secrets.git
      branch: "master"
      private_key: ((github-private-key/cc-secrets))

  <%# BASE IMAGE %>
  - name: base.image
    type: docker-image
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v2-base

  - name: juno.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: importmaps-v2
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))      

  <%# ASSETS SERVER %>
  - name: assets-server.version
    type: time-version-resource
    check_every: 525600h
    source: { key: juno-assets-server-version } # disambiguate from other time-version resources

  - name: assets-server.image
    type: docker-image
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v2-assets-server

  <%# ASSETS SOURCE GIT %>
  <% ASSETS.each do |name,details| %>
  - name: <%=details[:type]%>-<%= name %>.git
    type: git
    source:
      uri: https://github.com/sapcc/juno.git
      branch: importmaps-v2
      paths: ["<%=details[:path]%>","package.json","ci/Dockerfile.asset","e2e", ".yarn"]
      username: sapcc-bot
      password: ((github-access-token/sapcc-bot))
      
  - name: <%=details[:type]%>-<%= name %>.image
    type: docker-image
    check_every: 24h
    source:
      username: ((registry-user/keppel-ccloud.username))
      password: ((registry-user/keppel-ccloud.password))
      repository: keppel.eu-de-1.cloud.sap/ccloud/juno-v2-<%=details[:type]%>-<%= name %>   
  <% end %>

resource_types:
  - name: git-proxy
    type: registry-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/sapcc/concourse-git-resource-proxy

  - name: time-version-resource
    type: docker-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud/concourse-time-version-resource
      tag: v2

  - name: release
    type: docker-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud/concourse-release-resource
      tag: v2.latest

  - name: github-release
    type: docker-image
    check_every: 24h
    source:
      repository: keppel.eu-de-1.cloud.sap/ccloud/concourse-github-release-resource  


groups:
  - name: assets
    jobs:
      - readme
      - base-image
      <% ASSETS.each do |name,details| %>
      - <%=details[:type]%>-<%=name%> 
      <% end %>
      - assets-server
      - deploy-s-qa-de-1
  - name: services

jobs:
  <%# for info only %>
  - name: readme
    serial: true
    plan:
      - task: describe-this-pipeline
        config:
          platform: "linux"
          image_resource:
            type: docker-image
            source:
              repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/alpine
              tag: latest
          run:
            path: /bin/echo
            args:
              - -e
              - '\tThis pipeline is defined at: https://github.com/sapcc/juno/ci/\n\n'
              - '\tManage Juno images: https://keppel.eu-de-1.cloud.sap/ccloud/juno\n'

  <%# BUILD BASE IMAGE %>
  - name: base-image
    public: true
    plan:
      - get: juno.git
        trigger: true

      - put: base.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: juno.git
          dockerfile: juno.git/ci/Dockerfile.base

  <%# run unit tests for each asset and build %>
  <% ASSETS.each do |name,details| %>
  - name: <%= details[:type] %>-<%= name %>
    public: true
    plan:
      - get: <%=details[:type]%>-<%= name %>.git
        trigger: true

      - put: <%=details[:type]%>-<%= name %>.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          build: <%=details[:type]%>-<%= name %>.git
          build_args: 
            ASSET_NAME: "<%= name %>" 
            ASSET_PATH: "<%= details[:path] %>"
            BUILD_DIR: "<%= details[:build] %>"
          dockerfile: <%=details[:type]%>-<%= name %>.git/ci/Dockerfile.asset
        get_params:
          skip_download: true  
  <% end %>      


  <% 
  # this step combines all app images
  # for that we use nginx image and copy all built apps (in the step before)
  # into /usr/share/nginx/html/
  # this image will be deployed as CDN server 
  %>
  - name: assets-server
    public: true
    plan:
      <% ASSETS.each do |name, details|%>
      - get: <%=details[:type]%>-<%= name %>.image
        params: 
          rootfs: true # mount image contents under /rootfs.tar
        trigger: true 
        passed: [<%= details[:type] %>-<%= name %>]
      <% end %>
      - get: juno.git  
        trigger: true          
        passed: [base-image]
      - put: assets-server.version  

      <%# COPY ALL BUILDS TO dist %>
      - task: combine-builds
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: keppel.eu-de-1.cloud.sap/ccloud-dockerhub-mirror/library/busybox }
          inputs: 
            <% ASSETS.each do |name,details| %>
            - name: <%=details[:type]%>-<%= name %>.image
            <% end %>
            - name: juno.git 
          run:
            path: /bin/sh
            args:
              - -c
              - |
                <% ASSETS.each do |name,details| %>
                echo "add <%=details[:type]%>-<%= name %> to ./dist/<%=details[:type]%>s/<%= name %>"
                mkdir -p ./dist/<%=details[:type]%>s/<%= name %> 
                mkdir -p /tmp/<%=details[:type]%>-<%= name %>
                tar -xf ./<%=details[:type]%>-<%= name %>.image/rootfs.tar -C /tmp/<%=details[:type]%>-<%= name %>
                cp -r /tmp/<%=details[:type]%>-<%= name %>/dist/* ./dist/<%=details[:type]%>s/<%= name %>/
                ls -all ./dist/<%=details[:type]%>s/<%= name %>/
                echo "====================="
                <% end %>
          outputs:
            - name: dist
      # to serve our js, css and stattic assets this step will add all the created data 
      # in dist/ to the nginx image in /usr/share/nginx/html
      - put: assets-server.image
        params:
          tag_as_latest: true
          cache: true
          cache_tag: "latest"
          # root for docker build, its using the output dir from the step before
          build: dist
          dockerfile: juno.git/ci/Dockerfile.assets.server
          tag: assets-server.version/version
        get_params:
          skip_download: true   


  - name: deploy-s-qa-de-1
    serial: true
    plan:
      - in_parallel:
          - get: assets-server.version
            trigger: true
            passed: ["assets-server"]
          - get: juno.git
          - get: secrets.git
            params:
              depth: 100 

      - task: deploy
        file: secrets.git/ci/shared/task-helm-upgrade.yaml
        input_mapping:
          app.version: assets-server.version
          helm-charts.git: juno.git

        params:
          HELM_MAJOR_VERSION: '3'
          CHART_PATH: ci/helm-charts
          RELEASE: juno-v2
          NAMESPACE: juno
          REGION: qa-de-1
          CONTEXT: s-qa-de-1
          TAG_VARIABLE: assets-server.image_tag
          VALUES: local:globals s-local:juno 
          KUBELOGON_USER: ((unified-kubernetes-auth/default.username))
          KUBELOGON_PASSWORD: ((unified-kubernetes-auth/default.password))
          VAULT_ROLE_ID:      ((auth.role_id))
          VAULT_SECRET_ID:    ((auth.secret_id))

    ensure:
      put: qa-de-1.release          