{"version":3,"file":"index.js","sources":["index.js"],"sourcesContent":["var _global = typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : global;\n\nvar exports = {};\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n/** `Object#toString` result references. */\n\nvar symbolTag = \"[object Symbol]\";\n/** Detect free variable `global` from Node.js. */\n\nvar freeGlobal = typeof _global == \"object\" && _global && _global.Object === Object && _global;\n/** Detect free variable `self`. */\n\nvar freeSelf = typeof self == \"object\" && self && self.Object === Object && self;\n/** Used as a reference to the global object. */\n\nvar root = freeGlobal || freeSelf || Function(\"return this\")();\n/** Used for built-in method references. */\n\nvar objectProto = Object.prototype;\n/** Used to generate unique IDs. */\n\nvar idCounter = 0;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar objectToString = objectProto.toString;\n/** Built-in value references. */\n\nvar Symbol = root.Symbol;\n/** Used to convert symbols to primitives and strings. */\n\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\n\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == \"string\") {\n    return value;\n  }\n\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : \"\";\n  }\n\n  var result = value + \"\";\n  return result == \"0\" && 1 / value == -INFINITY ? \"-0\" : result;\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\n\n\nfunction isObjectLike(value) {\n  return !!value && typeof value == \"object\";\n}\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\n\n\nfunction isSymbol(value) {\n  return typeof value == \"symbol\" || isObjectLike(value) && objectToString.call(value) == symbolTag;\n}\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\n\n\nfunction toString(value) {\n  return value == null ? \"\" : baseToString(value);\n}\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\n\n\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nexports = uniqueId;\nexport default exports;"],"names":["_global","globalThis","self","global","exports","INFINITY","symbolTag","freeGlobal","Object","freeSelf","root","Function","objectProto","prototype","idCounter","objectToString","toString","Symbol","symbolProto","undefined","symbolToString","baseToString","value","isSymbol","call","result","isObjectLike","uniqueId","prefix","id"],"mappings":"AAAA,IAAIA,EAAgC,qBAAfC,WAA6BA,WAA6B,qBAATC,KAAuBA,KAAOC,OAEpG,IAAIC,EAAU,GAYd,IAAIC,EAAW,EAAI,EAGnB,IAAIC,EAAY,kBAGhB,IAAIC,EAA+B,iBAAXP,GAAuBA,GAAWA,EAAQQ,SAAWA,QAAUR,EAGvF,IAAIS,EAA0B,iBAARP,MAAoBA,MAAQA,KAAKM,SAAWA,QAAUN,KAG5E,IAAIQ,EAAOH,GAAcE,GAAYE,SAAS,cAATA,GAGrC,IAAIC,EAAcJ,OAAOK,UAGzB,IAAIC,EAAY,EAOhB,IAAIC,EAAiBH,EAAYI,SAGjC,IAAIC,EAASP,EAAKO,OAGlB,IAAIC,EAAcD,EAASA,EAAOJ,eAAYM,EAC1CC,EAAiBF,EAAcA,EAAYF,cAAWG,EAU1D,SAASE,aAAaC,GAEpB,GAAoB,iBAATA,EACT,OAAOA,EAGT,GAAIC,SAASD,GACX,OAAOF,EAAiBA,EAAeI,KAAKF,GAAS,GAGvD,IAAIG,EAASH,EAAQ,GACrB,MAAiB,KAAVG,GAAiB,EAAIH,IAAUjB,EAAW,KAAOoB,EA4B1D,SAASC,aAAaJ,GACpB,QAASA,GAAyB,iBAATA,EAqB3B,SAASC,SAASD,GAChB,MAAuB,iBAATA,GAAqBI,aAAaJ,IAAUP,EAAeS,KAAKF,IAAUhB,EAyB1F,SAASU,SAASM,GAChB,OAAgB,MAATA,EAAgB,GAAKD,aAAaC,GAqB3C,SAASK,SAASC,GAChB,IAAIC,IAAOf,EACX,OAAOE,SAASY,GAAUC,EAG5BzB,EAAUuB,SACV,MAAevB"}