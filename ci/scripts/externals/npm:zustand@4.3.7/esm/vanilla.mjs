const createStoreImpl=e=>{let t;const o=new Set;const setState=(e,n)=>{const r="function"===typeof e?e(t):e;if(!Object.is(r,t)){const e=t;t=(null!=n?n:"object"!==typeof r)?r:Object.assign({},t,r);o.forEach((o=>o(t,e)))}};const getState=()=>t;const subscribe=e=>{o.add(e);return()=>o.delete(e)};const destroy=()=>{"production"!==(import.meta.env&&import.meta.env.MODE)&&console.warn("[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.");o.clear()};const n={setState:setState,getState:getState,subscribe:subscribe,destroy:destroy};t=e(setState,getState,n);return n};const createStore=e=>e?createStoreImpl(e):createStoreImpl;var vanilla=e=>{"production"!==(import.meta.env&&import.meta.env.MODE)&&console.warn("[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'.");return createStore(e)};export{createStore,vanilla as default};

//# sourceMappingURL=vanilla.mjs.map