import React from "react"
import dedent from "dedent"
import { Tooltip, TooltipAnchor, useTooltipState } from "./index.js"
import { tooltipPlacementOptions, tooltipVariants } from "./useTooltipState.js"
import { Icon } from "../Icon/index.js"
import { Button } from "../Button/index.js"

export default {
  title: "WiP/Tooltip",
  component: Tooltip,
  argTypes: {
    placement: {
      options: tooltipPlacementOptions,
      control: 'select',
      description: "Tooltip placement in relation to trigger",
      table: { 
        // the map and join functions result in output that matches what gets autogenerated from PropTypes
        // you want a String where each options is enclosed in double quotes and separated from the other options by pipes
        // e.g. `"one" | "two"`
        type: { summary: tooltipPlacementOptions.map( o => `"${o}"`).join(' | ') }, 
        defaultValue: { summary: `"bottom"` } 
      }
    },
    variant: {
      options: tooltipVariants,
      control: 'select',
      description: "The semantic variant of the tooltip, or if not specified the default non-semantic style will be rendered",
      table: { type: { summary: tooltipVariants.map( o => `"${o}"`).join(' | ') } } // the map and join functions result in output that matches what gets autogenerated from PropTypes, see above
    },
    triggerEvent: {
      options: ["click", "hover"],
      control: 'radio',
      description: "Whether the tooltip should be opened on click or hover of the anchor element",
      table: { 
        type: { summary: '"click" | "hover"' },
        defaultValue: { summary: `"click"` } 
      }
    },
    open: {
      control: 'boolean',
      description: "Set to true to open the tooltip",
      table: { 
        type: { summary: 'boolean' },
        defaultValue: { summary: false } 
      }
    },
    disabled: {
      control: 'boolean',
      description: "Set to true to disable the tooltip",
      table: { 
        type: { summary: 'boolean' },
        defaultValue: { summary: false } 
      }
    },
  },
  decorators: [
    (Story) => (
      <div className="jn-my-6 jn-flex jn-justify-center">
        <Story />
      </div>
    ),
  ],
}

const Template = ({placement, variant, open, triggerEvent, disabled, ...args}) => {
  const state = useTooltipState({placement, variant, open, triggerEvent, disabled})
  
  return (
    <>
      <TooltipAnchor state={state}>clickMe</TooltipAnchor>
      <Tooltip state={state} {...args} />
    </>
)}

const TemplateAsChildAnchor = ({placement, variant, open, triggerEvent, disabled, ...args}) => {
  const tooltipState = useTooltipState({placement, variant, open, triggerEvent, disabled})
  
  return (
    <>
      <TooltipAnchor state={tooltipState} asChild={true}><Icon /></TooltipAnchor>
      <Tooltip state={tooltipState} {...args} />
    </>
)}

export const Default = Template.bind({})
Default.args = {
  text: "A default tooltip",
  open: true
}
Default.parameters = {
  docs: {
    source: {
      code: dedent`
      // pass placement, variant, open, triggerEvent, disabled to the state hook
      const tooltipState = useTooltipState()
      
      return (
        <>
          <TooltipAnchor state={tooltipState}>clickMe</TooltipAnchor>
          <Tooltip state={tooltipState} text='A default tooltip' />
        </>
      )`,
      language: "jsx",
    },
  },
}

export const InfoTooltip = TemplateAsChildAnchor.bind({})
InfoTooltip.args = {
  variant: "info",
  text: "An Info Tooltip",
  open: true
}
InfoTooltip.parameters = {
  docs: {
    source: {
      code: dedent`
      // pass placement, variant, open, triggerEvent, disabled to the state hook
      const tooltipState = useTooltipState(variant: "info")
      
      return (
        <>
          <TooltipAnchor state={tooltipState}>clickMe</TooltipAnchor>
          <Tooltip state={tooltipState} text='An info tooltip' />
        </>
      )`,
      language: "jsx",
    },
  },
}

export const WarningTooltip = TemplateAsChildAnchor.bind({})
WarningTooltip.args = {
  variant: "warning",
  text: "A Warning Tooltip",
  open: true
}
WarningTooltip.parameters = {
  docs: {
    source: {
      code: dedent`
      // pass placement, variant, open, triggerEvent, disabled to the state hook
      const tooltipState = useTooltipState(variant: "warning")
      
      return (
        <>
          <TooltipAnchor state={tooltipState}>clickMe</TooltipAnchor>
          <Tooltip state={tooltipState} text='A warning tooltip' />
        </>
      )`,
      language: "jsx",
    },
  },
}

export const ErrorTooltip = TemplateAsChildAnchor.bind({})
ErrorTooltip.args = {
  variant: "error",
  text: "An Error Tooltip",
  open: true
}
ErrorTooltip.parameters = {
  docs: {
    source: {
      code: dedent`
      // pass placement, variant, open, triggerEvent, disabled to the state hook
      const tooltipState = useTooltipState(variant: "error")
      
      return (
        <>
          <TooltipAnchor state={tooltipState}>clickMe</TooltipAnchor>
          <Tooltip state={tooltipState} text='An error tooltip' />
        </>
      )`,
      language: "jsx",
    },
  },
}

export const DangerTooltip = TemplateAsChildAnchor.bind({});
DangerTooltip.args = {
  variant: 'danger',
  text: 'A Danger Tooltip.',
  open: true
}
DangerTooltip.parameters = {
  docs: {
    source: {
      code: dedent`
      // pass placement, variant, open, triggerEvent, disabled to the state hook
      const tooltipState = useTooltipState(variant: "danger")
      
      return (
        <>
          <TooltipAnchor state={tooltipState}>clickMe</TooltipAnchor>
          <Tooltip state={tooltipState} text='A danger tooltip' />
        </>
      )`,
      language: "jsx",
    },
  },
}

export const SuccessTooltip = TemplateAsChildAnchor.bind({});
SuccessTooltip.args = {
  variant: 'success',
  text: 'A Success Tooltip',
  open: true
}
SuccessTooltip.parameters = {
  docs: {
    source: {
      code: dedent`
      // pass placement, variant, open, triggerEvent, disabled to the state hook
      const tooltipState = useTooltipState(variant: "success")
      
      return (
        <>
          <TooltipAnchor state={tooltipState}>clickMe</TooltipAnchor>
          <Tooltip state={tooltipState} text='A success tooltip' />
        </>
      )`,
      language: "jsx",
    },
  },
}


export const Disabled = TemplateAsChildAnchor.bind({})
Disabled.args = {
  text: "A disabled tooltip",
  disabled: true,
}
Disabled.parameters = {
  docs: {
    description: {
      story:
        "When the tooltip is disabled it won't open at all and hovering over the tooltip anchor will result in a standard cursor instead of a pointer cursor.",
    },
    source: {
      code: dedent`
      // pass placement, variant, open, triggerEvent, disabled to the state hook
      const tooltipState = useTooltipState(disabled: true)
      
      return (
        <>
          <TooltipAnchor state={tooltipState}>clickMe</TooltipAnchor>
          <Tooltip state={tooltipState} text='A disabled tooltip' />
        </>
      )`,
      language: "jsx",
    },
  },
}

