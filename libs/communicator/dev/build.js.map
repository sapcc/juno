{
  "version": 3,
  "sources": ["../src/index.js"],
  "sourcesContent": ["/**\n *\n * @returns epoch timestamp (count of seconds since 1970)\n */\nconst uniqString = () => Math.random().toString(36).substring(2)\n\n// create an uniq id for current window (current context)\n// this id is used to identify the current when intra-window communication is used\nwindow.__junoCommunicatorTabId = window.__junoCommunicatorTabId || uniqString()\n\nwindow.__junoEventListeners = window.__junoEventListeners || {\n  broadcast: {},\n  get: {},\n}\n\nconst log = (...params) => console.log(\"Communicator Debug:\", ...params)\nconst warn = (...params) => console.warn(\"Communicator Warning:\", ...params)\nconst error = (...params) => console.error(\"Communicator Error:\", ...params)\n\nconst addListener = (type, event, listener) => {\n  if (!window.__junoEventListeners[type]?.[event]) {\n    window.__junoEventListeners[type][event] = []\n  }\n  window.__junoEventListeners[type][event].push(listener)\n}\n\nconst removeListener = (type, event, listener) => {\n  if (!window.__junoEventListeners[type]?.[event]) return\n  window.__junoEventListeners[type][event] = window.__junoEventListeners[type][\n    event\n  ].filter((l) => l !== listener)\n}\n\nconst listenerWrapper =\n  (callback) =>\n  (data, options = {}) => {\n    // Create a promise that will be resolved when the listener is executed\n    return new Promise(async (resolve) => {\n      callback(data, options)\n      resolve()\n    })\n  }\n\nif (typeof BroadcastChannel === \"undefined\") {\n  // BroadcastChannel is not available\n  console.log(\n    \"BroadcastChannel is not supported in this browser. Use fake BroadcastChannel.\"\n  )\n  window.BroadcastChannel = function () {\n    return {\n      postMessage: () => null,\n      onmessage: () => null,\n      close: () => null,\n    }\n  }\n} else {\n  // BroadcastChannel is available\n  console.log(\"BroadcastChannel is supported in this browser.\")\n}\n\nconst crossWindowEventBridge = new BroadcastChannel(\n  \"__JUNO_CROSS_WINDOW_EVENT_BRIDGE__\"\n)\n\ncrossWindowEventBridge.onmessage = (e) => {\n  const { type, name, data, sourceWindowId } = e.data || {}\n\n  if (type === \"broadcast\") {\n    window.__junoEventListeners[\"broadcast\"]?.[name]?.forEach((listener) => {\n      try {\n        listener(data, {\n          crossWindow: true,\n          sourceWindowId,\n          thisWindowId: window.__junoCommunicatorTabId,\n        })\n      } catch (e) {\n        warn(e)\n      }\n    })\n  }\n}\n\n/**\n * Send messages via BroadcastChannel across contexts (e.g. several tabs on\n * the same origin). The last message is stored by default. However, it\n * is possible to influence the storage period using the expire option.\n * @param {string} name\n * @param {any} data\n * @param {object} options (optional) allowed options are debug:undefined|boolean and expires:undefined|number\n * @returns void\n */\nconst broadcast = (name, data, options = {}) => {\n  try {\n    if (typeof name !== \"string\")\n      throw new Error(\"(broadcast) the message name must be given.\")\n    if (data === undefined) data = null\n\n    const { debug, crossWindow = false, ...unknownOptions } = options || {}\n    const unknownOptionsKeys = Object.keys(unknownOptions)\n    if (unknownOptionsKeys.length > 0)\n      warn(`(broadcast) unknown options: ${unknownOptionsKeys.join(\", \")}`)\n    if (debug != undefined && typeof debug !== \"boolean\")\n      warn(\"(broadcast) debug must be a boolean\")\n    if (typeof crossWindow !== \"boolean\")\n      warn(\"(broadcast) crossWindow must be a boolean\")\n\n    if (debug) {\n      console.log(\"===================1\")\n      log(\n        `broadcast ${\n          crossWindow ? \"cross-window\" : \"intra-window\"\n        } message ${name} with data `,\n        data\n      )\n      console.log(\"===================2\")\n    }\n\n    window.__junoEventListeners[\"broadcast\"]?.[name]?.forEach((listener) => {\n      try {\n        listener(data, {\n          sourceWindowId: window.__junoCommunicatorTabId,\n          thisWindowId: window.__junoCommunicatorTabId,\n        })\n      } catch (e) {\n        warn(e)\n      }\n    })\n\n    if (crossWindow) {\n      crossWindowEventBridge.postMessage({\n        type: \"broadcast\",\n        name,\n        data,\n        sourceWindowId: window.__junoCommunicatorTabId,\n      })\n    }\n  } catch (e) {\n    error(e.message)\n  }\n}\n\n/**\n * Register a listener for a specific message. Messages are observed\n * across contexts (e.g. several tabs on the same origin).\n * If a current saved message already exists for the name,\n * then the listener is executed immediately with this message.\n * The expires option set by the \"send\" method has an effect here.\n * In addition, the age of the listened messages can be determined\n * with the youngerThan option.\n * @param {string} name\n * @param {function} callback:(data) => void\n * @param {object} options\n * @returns {function} unregister:()=>void, a function to stop listening\n */\nconst watch = (name, callback, options = {}) => {\n  try {\n    if (typeof name !== \"string\")\n      throw new Error(\"(watch) the message name must be given.\")\n    if (typeof callback !== \"function\")\n      throw new Error(\"(watch) the callback parameter must be a function.\")\n\n    const { debug, ...unknownOptions } = options || {}\n    const unknownOptionsKeys = Object.keys(unknownOptions)\n    if (unknownOptionsKeys.length > 0)\n      warn(`(watch) unknown options: ${unknownOptionsKeys.join(\", \")}`)\n\n    if (debug)\n      log(\n        `watch for ${\n          crossWindow ? \"cross-window\" : \"intra-window\"\n        } message ${name}`\n      )\n\n    addListener(\"broadcast\", name, listenerWrapper(callback))\n\n    return () => removeListener(\"broadcast\", name, listenerWrapper(callback))\n  } catch (e) {\n    error(e.message)\n  }\n}\n\n/**\n * This function implements a 1:1 communication\n * @param {string} name\n * @param {function} callback\n * @param {object} options\n * @returns cancel function\n */\nconst get = (name, callback, options = {}) => {\n  try {\n    if (typeof name !== \"string\")\n      throw new Error(\"(get) the message name must be given.\")\n    if (typeof callback !== \"function\")\n      throw new Error(\"(get) the callback parameter must be a function.\")\n    const { debug, getOptions, ...unknownOptions } = options || {}\n    const unknownOptionsKeys = Object.keys(unknownOptions)\n    if (unknownOptionsKeys.length > 0)\n      warn(`(get) unknown options: ${unknownOptionsKeys.join(\", \")}`)\n    if (debug) log(`get data for intra-window message ${name}`)\n\n    if (window.__junoEventListeners[\"get\"]?.[name]?.length === 0) return\n\n    // console.log(\"==============get\", window.__junoEventListeners[\"get\"]?.[name])\n    window.__junoEventListeners[\"get\"][name]?.forEach((listener) => {\n      try {\n        const data = listener(options?.getOptions)\n        callback(data, {\n          sourceWindowId: window.__junoCommunicatorTabId,\n          thisWindowId: window.__junoCommunicatorTabId,\n        })\n      } catch (e) {\n        warn(e)\n      }\n    })\n  } catch (e) {\n    error(e.message)\n  }\n}\n\n/**\n * Listen to get messages\n * @param {string} name\n * @param {function} callback\n * @param {object} options\n * @returns cancel function\n */\nconst onGet = (name, callback, options = {}) => {\n  try {\n    if (typeof name !== \"string\")\n      throw new Error(\"(onGet) the message name must be given.\")\n    if (typeof callback !== \"function\")\n      throw new Error(\"(onGet) the callback parameter must be a function.\")\n    const { debug, crossWindow = false, ...unknownOptions } = options || {}\n    const unknownOptionsKeys = Object.keys(unknownOptions)\n    if (unknownOptionsKeys.length > 0)\n      warn(`(onGet) unknown options: ${unknownOptionsKeys.join(\", \")}`)\n    if (debug) log(`send data for intra-window message ${name}`)\n\n    addListener(\"get\", name, listenerWrapper(callback))\n\n    return () => removeListener(\"get\", name, listenerWrapper(callback))\n  } catch (e) {\n    error(e.message)\n  }\n}\n\nexport { broadcast, watch, get, onGet }\n"],
  "mappings": "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",
  "names": ["e", "crossWindow"]
}
