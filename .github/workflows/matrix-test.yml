name: Juno (build & deploy all apps)

on:
  push:
    branches:
      - gh-matrix

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # On release creation
  # release:
  #   types: [created]

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "tests&deployments"
  cancel-in-progress: true

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  changes:
    runs-on: [ubuntu-latest]
    outputs:
      apps: ${{ steps.filters.outputs.apps }}
      libs: ${{ steps.filters.outputs.libs }}
      app-changes: ${{ steps.app-filters.outputs.changes }}
      lib-changes: ${{ steps.lib-filters.outputs.changes }}
    steps:
      - uses: actions/checkout@v4
      - name: Generate app and lib filters
        run: |
          for folder in apps/*; do
            folder_name=$(basename "$folder")
            echo "$folder_name: $folder/**" >> temp_app_filters.yaml
          done
          for folder in libs/*; do
            folder_name=$(basename "$folder")
            echo "$folder_name: $folder/**" >> temp_lib_filters.yaml
          done
      - uses: dorny/paths-filter@v3
        id: filters
        with:
          list-files: shell
          filters: |
            apps: apps/**
            libs: libs/**
      - uses: dorny/paths-filter@v3
        id: app-filters
        with:
          list-files: shell
          filters: temp_app_filters.yaml
      - uses: dorny/paths-filter@v3
        id: lib-filters
        with:
          list-files: shell
          filters: temp_lib_filters.yaml
      - name: Show outputs
        run: |
          echo "===================="
          cat temp_app_filters.yaml
          echo "===================="
          cat temp_lib_filters.yaml
          echo "===================="
          echo apps: ${{ steps.filters.outputs.apps}}
          echo apps_files: ${{ steps.filters.outputs.apps_files}}
          echo app changes: ${{ steps.app-filters.outputs.changes}}
          echo libs: ${{ steps.filters.outputs.libs}}
          echo libs_files: ${{ steps.filters.outputs.libs_files}}
          echo lib changes: ${{ steps.lib-filters.outputs.changes}}
          echo "===================="
  test-outputs:
    needs: changes
    runs-on: [ubuntu-latest]
    steps:
      - name: show inputs
        run: |
          echo apps: ${{ needs.changes.outputs.apps }}
          echo libs: ${{ needs.changes.outputs.libs }}
          echo app changes: ${{ needs.changes.outputs.app-changes }}
          echo lib changes: ${{ needs.changes.outputs.lib-changes }}

  apps:
    needs: changes
    if: ${{ needs.changes.outputs.apps == 'true' }}
    runs-on: [ubuntu-latest]
    strategy:
      matrix:
        apps: ${{fromJson(needs.changes.outputs.app-changes)}}
    steps:
      - run: echo ${{ matrix.apps }}

  libs:
    needs: changes
    if: ${{ needs.changes.outputs.libs == 'true' }}
    runs-on: [ubuntu-latest]
    strategy:
      matrix:
        apps: ${{fromJson(needs.changes.outputs.lib-changes)}}
    steps:
      - run: echo ${{ matrix.apps }}
