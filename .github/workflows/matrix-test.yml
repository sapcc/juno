name: Juno (build & deploy all apps)

on:
  push:
    branches:
      - gh-matrix

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # On release creation
  # release:
  #   types: [created]

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "tests&deployments"
  cancel-in-progress: true

# Default to bash
defaults:
  run:
    shell: bash

# echo "paths=$(ls -d ./apps/*/ | sed 's/^\.\///' | sed 's/$/**/' | jq --raw-input --slurp --compact-output 'split("\n")[:-1]')" >> ${GITHUB_OUTPUT}
# echo "paths=$(ls -d ./apps/*/ | sed 's/^\.\///' | sed 's/$/**/' | sed 's|[^/]*/|"&"|g' | jq --raw-input --slurp --compact-output 'split("\n")[:-1]')" >> ${GITHUB_OUTPUT}
jobs:
  collect_info:
    runs-on: [ubuntu-latest]
    outputs:
      apps: ${{ steps.collect-apps.outputs.apps }}
      paths: ${{ steps.collect-apps.outputs.paths }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Collect apps
        id: collect-apps
        run: |
          echo "apps=$(ls -d ./apps/*/ | jq --raw-input --slurp --compact-output 'split("\n")[:-1]')" >> ${GITHUB_OUTPUT}
      - name: Show outputs
        run: |
          echo "===================="
          echo apps: ${{ steps.collect-apps.outputs.apps }}
          echo "===================="
  changes:
    needs: collect_info
    runs-on: [ubuntu-latest]
    outputs:
      apps: ${{ steps.filter.outputs.apps }}
    steps:
      - uses: actions/checkout@v4
      - name: Generate temporary YAML file with all apps and libs existing as a filter
        run: |
          echo "apps: apps/**" >> temp_filters.yaml
          for folder in apps/*; do
            folder_name=$(basename "$folder")
            echo "$folder_name: $folder/**" >> temp_filters.yaml
          done
          echo "libs: libs/**" >> temp_filters.yaml
          for folder in libs/*; do
            folder_name=$(basename "$folder")
            echo "$folder_name: $folder/**" >> temp_filters.yaml
          done
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          list-files: shell
          filters: temp_filters.yaml
      - name: Show outputs
        run: |
          echo "===================="
          cat temp_filters.yaml
          echo "===================="
          echo apps: ${{ steps.filter.outputs.apps}}
          echo libs: ${{ steps.filter.outputs.libs}}
          echo apps_files: ${{ steps.filter.outputs.apps_files}}
          echo changes: ${{ steps.filter.outputs.changes}}
          echo "===================="

  # apps:
  #   needs: changes
  #   if: ${{ needs.changes.outputs.apps == 'true' }}
  #   runs-on: [ubuntu-latest]
  #   steps:
  #     - run: echo ${{ needs.changes.outputs.apps }}

  # run_test:
  #   needs: collect_info
  #   runs-on: [ubuntu-latest]
  #   strategy:
  #     matrix:
  #       apps: ${{fromJson(needs.collect_info.outputs.apps)}}
  #   steps:
  #     - run: echo ${{ matrix.apps }}
